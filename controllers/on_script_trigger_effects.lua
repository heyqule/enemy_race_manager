---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 2/15/2022 9:47 PM
---
require("__enemyracemanager__/global")

local Config = require("__enemyracemanager__/lib/global_config")
local RaceSettingHelper = require("__enemyracemanager__/lib/helper/race_settings_helper")
local SurfaceProcessor = require("__enemyracemanager__/lib/surface_processor")
local AttackGroupProcessor = require("__enemyracemanager__/lib/attack_group_processor")
local AttackGroupBeaconConstants = require("__enemyracemanager__/lib/attack_group_beacon_constants")
local AttackGroupBeaconProcessor = require("__enemyracemanager__/lib/attack_group_beacon_processor")
local AttackMeterProcessor = require("__enemyracemanager__/lib/attack_meter_processor")
local QualityProcessor = require("__enemyracemanager__/lib/quality_processor")
local BossPsiRadar = require("__enemyracemanager__/lib/boss_psi_radar")
local BossProcessor = require("__enemyracemanager__/lib/boss_processor")

local CustomAttacks = require("__enemyracemanager__/prototypes/base-units/custom_attacks")
local EnvironmentalAttacks = require("__enemyracemanager__/lib/environmental_attacks")

local ArmyPopulation = require("__enemyracemanager__/lib/army_population_processor")
local ArmyControlUI = require("__enemyracemanager__/gui/army_control_window")

local ArmyDeployer = require("__enemyracemanager__/lib/army_deployment_processor")
local RallyPointUI = require("__enemyracemanager__/gui/deployer_attachment")

-- Player super weapon attacks functions
local process_attack_point_event = function(event, attack_point)
    local force_name = SurfaceProcessor.get_enemy_on(game.surfaces[event.surface_index].name)
    if force_name then
        RaceSettingHelper.add_to_attack_meter(force_name, attack_point)
    end
end

local process_counter_attack_event = function(event, radius)
    AttackGroupProcessor.generate_nuked_group(game.surfaces[event.surface_index], event.target_position, radius, event.source_entity)
end

local is_valid_attack_for_attack_point = function(event)
    return Config.super_weapon_attack_points_enable() and game.surfaces[event.surface_index].valid
end

local is_valid_attack_for_counter_attack = function(event)
    return Config.super_weapon_counter_attack_enable() and game.surfaces[event.surface_index].valid
end

local remove_creep = function(entity)
    local spawner = entity
    if spawner and spawner.valid then
        local spawner_name = spawner.name
        local names
        if storage.decorative_cache[spawner_name] then
            names = storage.decorative_cache[spawner_name]
        else
            local prototype = spawner.prototype
            local prototype_decos = prototype.spawn_decoration
            names = {}
            for i = 1, table_size(prototype_decos), 1 do
                table.insert(names, prototype_decos[i].decorative)
            end
            storage.decorative_cache[spawner_name] = names
        end

        if names then
            spawner.surface.destroy_decoratives({
                name = names,
                area = {
                    left_top = {x=spawner.position.x - 6,y=spawner.position.y - 6},
                    right_bottom = {x=spawner.position.x + 6,y=spawner.position.y + 6},
                }
            })
        end
    end
end

local script_functions = {

    --- Biter attacks
    [CONSTRUCTION_ATTACK] = function(args)
        if CustomAttacks.valid(args, MOD_NAME) then
            CustomAttacks.process_constructor(args)
        end
    end,
    [LOGISTIC_ATTACK] = function(args)
        if CustomAttacks.valid(args, MOD_NAME) then
            CustomAttacks.process_logistic(args)
        end
    end,

    --- Player super weapon attacks
    [PLAYER_SUPER_WEAPON_ATTACK] = function(event)
        if is_valid_attack_for_attack_point(event) then
            process_attack_point_event(event, Config.super_weapon_attack_points())
        end
    end,
    [PLAYER_PLANET_PURIFIER_ATTACK] = function(event)
        if is_valid_attack_for_attack_point(event) then
            process_attack_point_event(event, Config.super_weapon_attack_points() * 200)
        end
    end,
    [PLAYER_SUPER_WEAPON_COUNTER_ATTACK] = function(event)
        if is_valid_attack_for_counter_attack(event) then
            process_counter_attack_event(event, 48)
        end
    end,
    [PLAYER_PLANET_PURIFIER_COUNTER_ATTACK] = function(event)
        if is_valid_attack_for_counter_attack(event) then
            process_counter_attack_event(event, 96)
        end
    end,

    --- Boss related
    [TRIGGER_BOSS_DIES] = function(args)
        storage.boss.victory = true
    end,
    [TRIGGER_BOSS_ASSIST_SPAWNED] = function(args)
        BossProcessor.assisted_spawner_spawns(args)
    end,
    [TRIGGER_BOSS_ASSIST_DIES] = function(args)
        BossProcessor.assisted_spawner_dies(args)
    end,
    [BOSS_SEGMENT_UNIT_DIES] =  function(args)
        BossProcessor.controlled_segmented_unit_dies(args)
    end,

    --- Attack group beacons
    [LAND_SCOUT_BEACON] = function(event)
        AttackGroupBeaconProcessor.create_defense_beacon(event.source_entity, AttackGroupBeaconConstants.LAND_BEACON)
        AttackGroupBeaconProcessor.create_attack_entity_beacon(event.source_entity)
    end,
    [AERIAL_SCOUT_BEACON] = function(event)
        AttackGroupBeaconProcessor.create_defense_beacon(event.source_entity, AttackGroupBeaconConstants.AERIAL_BEACON)
        AttackGroupBeaconProcessor.create_attack_entity_beacon(event.source_entity)
    end,

    --- Army Population
    [ARMY_POPULATION_INCREASE] = function(event)
        local unit = event.source_entity
        if unit and unit.valid and ArmyPopulation.can_place_unit(unit) then
            ArmyPopulation.add_unit_count(unit)
        else
            if unit.last_user then
                unit.last_user.print("You need additional Follower Count Research!")
                unit.last_user.insert { name = unit.name, count = 1 }
                unit.last_user.play_sound({ path = "erm-army-full-population" })
            end
            unit.destroy()
            ArmyControlUI.update_army_stats()
        end
    end,
    [ARMY_POPULATION_DECREASE] = function(event)
        local unit = event.source_entity
        if unit and unit.valid then
            ArmyPopulation.remove_unit_count(unit)
            unit.force.play_sound({ path = "erm-army-force-under-attack-by-chance" })
            ArmyControlUI.update_army_stats()
        end
    end,

    [ARMY_RALLYPOINT_DEPLOY] = function(event)
        local rallypoint = event.source_entity
        if rallypoint and rallypoint.valid then
            rallypoint.destructible = false
            local player = event.source_entity.last_user
            local ui = player.gui.relative[RallyPointUI.root_name]
            if ui then
                ArmyDeployer.add_rallypoint(rallypoint, ui.tags.unit_number)
                rallypoint.destroy()
                player.game_view_settings.show_entity_info = true
                RallyPointUI.show(player, ui.tags.unit_number)
            end
        end
    end,

    [ENVIRONMENTAL_ATTACK] = function(event)
        local surface = game.surfaces[event.surface_index]
        local target_position = event.target_position

        local force_spawn, force_spawn_base
        local spawn_chance = 50
        local spawn_count = 5
        if TEST_MODE then
            force_spawn = RaceSettingHelper.can_spawn(spawn_chance)
            if storage.override_environmental_attack_can_spawn == true then
                force_spawn = true
            elseif storage.override_environmental_attack_can_spawn == false then
                force_spawn = false
            end

            if storage.override_environmental_attack_spawn_base == true then
                force_spawn_base = true
            elseif storage.override_environmental_attack_spawn_base == false then
                force_spawn_base = false
            end
        end

        EnvironmentalAttacks.exec({
            surface = surface,
            target_position = target_position,
            force_spawn = force_spawn,
            force_spawn_base = force_spawn_base,
            spawn_count = spawn_count,
            spawn_chance = spawn_chance
        })
    end,

    [QUALITY_DICE_ROLL] = function(event)
        return QualityProcessor.roll(event.source_entity)
    end,

    [QUALITY_TALLY_POINT] = function(event)
        AttackMeterProcessor.calculate_points(event.source_entity)
    end,
    
    [REGISTER_BOSS_RADAR] = function(event)
        -- boss radar print
        BossPsiRadar.register(event.source_entity)
    end 
}

local creep_removal_enabled = settings.startup['enemyracemanager-auto-creep-removal'].value
if creep_removal_enabled then
    script_functions[CREEP_REMOVAL] = function(event)
        remove_creep(event.source_entity)
    end
end


local TriggerEffects = {}

TriggerEffects.events = {
    [defines.events.on_script_trigger_effect] =  function(event)
        if script_functions[event.effect_id] then
            script_functions[event.effect_id](event)
        end
    end
}
return TriggerEffects

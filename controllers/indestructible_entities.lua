---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 4/13/2025 1:09 PM
---

local String = require('__erm_libs__/stdlib/string')
local DebugHelper = require("__enemyracemanager__/lib/debug_helper")

local enabled = false

local include_types_mapping = {}

local include_types = {
    "curved-rail-a",
    "curved-rail-b",
    "half-diagonal-rail",
    "legacy-curved-rail",
    "legacy-straight-rail",
    "straight-rail",
    "rail-ramp",
    "rail-support",
    "elevated-curved-rail-a",
    "elevated-curved-rail-b",
    "elevated-half-diagonal-rail",
    "elevated-straight-rail",
    "rail-chain-signal",
    "rail-signal",
}

local function make_entity_indestructible(event)
    if enabled then
        local entity = event.entity
        local ignore_planets = storage.indestructible_entity_ignore_planets
        local applicable_planets = storage.indestructible_entity_acceptable_planets

        if entity and entity.valid and
                not ignore_planets[entity.surface.name] and
                applicable_planets[entity.surface.name] and
                (include_types_mapping[entity.type])
        then
            entity.destructible = false
        end
    end
end

local function on_configuration_changed(event)
    enabled = settings.startup['enemyracemanager-rail-entities-indestructible'].value
    storage.indestructible_entity_ignore_planets = storage.indestructible_entity_ignore_planets or {}
    storage.indestructible_entity_acceptable_planets = storage.indestructible_entity_acceptable_planets or {}

    for interface_name, functions in pairs(remote.interfaces) do
        if functions["register_ignore_planet_for_indestructible_entity"]  then
            for _, name in pairs(remote.call(interface_name, "register_ignore_planet_for_indestructible_entity")) do
                storage.indestructible_entity_ignore_planets[String.trim(name)] = true
            end
        end

        if functions["register_applicable_planet_for_indestructible_entity"] then
            for _, name in pairs(remote.call(interface_name, "register_applicable_planet_for_indestructible_entity")) do
                storage.indestructible_entity_acceptable_planets[String.trim(name)] = true
            end
        end
    end
    local ignore_planets = storage.indestructible_entity_ignore_planets
    local applicable_planets = storage.indestructible_entity_acceptable_planets

    local planet_string = settings.startup['enemyracemanager-rail-entities-indestructible-planets'].value
    local planets_tokens = String.split(planet_string, ',')
    for _, planet_name in pairs(planets_tokens) do
        planet_name = String.trim(planet_name)
        if not ignore_planets[planet_name] then
            applicable_planets[planet_name] = true
        end
    end

    for value in pairs(include_types) do
        include_types_mapping[value] = true
    end

    --- indestructible entity migration ---
    for _, surface in pairs(game.surfaces) do
        if applicable_planets[surface.name] then
            for chunk in surface.get_chunks() do
                local entities = surface.find_entities_filtered {
                    type = include_types,
                    area = chunk.area,
                    
                }
                for _, entity in pairs(entities) do
                    if enabled then
                        entity.destructible = false
                    else
                        entity.destructible = true
                    end
                end
            end
        end
    end

    DebugHelper.print('--- Indestructable entity - ignore planet ---')
    DebugHelper.print(serpent.block(ignore_planets))
    DebugHelper.print('--- Indestructable entity - applicable planet ---')
    DebugHelper.print(serpent.block(applicable_planets))
end


local IndestructibleEntity = {}
IndestructibleEntity.on_configuration_changed = on_configuration_changed
IndestructibleEntity.on_init = on_configuration_changed
IndestructibleEntity.events = {
    [defines.events.script_raised_revive] = make_entity_indestructible,
    [defines.events.script_raised_built] = make_entity_indestructible,
    [defines.events.on_built_entity] = make_entity_indestructible,
    [defines.events.on_robot_built_entity] = make_entity_indestructible,
}

return IndestructibleEntity
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 7/1/2021 1:27 PM
---
local String = require('__erm_libs__/stdlib/string')
local MapGenFunctions = require('__erm_libs__/prototypes/map_gen')
local GlobalConfig = require("__enemyracemanager__/lib/global_config")
local DebugHelper = require("__enemyracemanager__/lib/debug_helper")
local ForceHelper = require("__enemyracemanager__/lib/helper/force_helper")

require("__enemyracemanager__/global")
require("__enemyracemanager__/setting-constants")

local gap = 128
local create_2_way_positive_noise_expression = function(entity)
    local name = "erm_2_way_positive-"..entity.name
    local expression = "x_axis_positive_2_way_split("..entity.autoplace.probability_expression..", "..gap..")"
    if settings.startup['enemyracemanager-2way-group-enemy-orientation'].value == Y_AXIS then
        expression = "y_axis_positive_2_way_split("..entity.autoplace.probability_expression..", "..gap..")"
    end
    data:extend {
        {
            type = "noise-expression",
            name = name,
            expression = expression
        },
    }

    return name
end

local create_2_way_negative_noise_expression = function(entity)
    local name = "erm_2_way_negative-"..entity.name
    local expression = "x_axis_negative_2_way_split("..entity.autoplace.probability_expression..", "..gap..")"
    if settings.startup['enemyracemanager-2way-group-enemy-orientation'].value == Y_AXIS then
         expression = "y_axis_negative_2_way_split("..entity.autoplace.probability_expression..", "..gap..")"
    end
    data:extend {
        {
            type = "noise-expression",
            name = name,
            expression = expression
        },
    }

    return name
end


local create_4_way_noise_expression = function(entity, direction)
    local direction_str = {
        [defines.direction.northeast] = 'northeast',
        [defines.direction.northwest] = 'northwest',
        [defines.direction.southwest] = 'southwest',
        [defines.direction.southeast] = 'southeast',
    }
    
    local name = "erm_4_ways-"..direction_str[direction].."-"..entity.name
    local expression = direction_str[direction].."_4_way_split("..entity.autoplace.probability_expression..", "..gap..")"
    data:extend {
        {
            type = "noise-expression",
            name = name,
            expression = expression
        },
    }
    
    return name
end

local entity_types = {"unit-spawner","turret"}
local nauvis = data.raw.planet.nauvis
local map_gen_settings = nauvis.map_gen_settings
---@TODO to support custom start up planet
if map_gen_settings == nil then
    return
end

if settings.startup['enemyracemanager-nauvis-enemy'].value == NAUVIS_2_WAY then

    local twoway_positive = settings.startup['enemyracemanager-2way-group-enemy-positive'].value
    local twoway_negative = settings.startup['enemyracemanager-2way-group-enemy-negative'].value

    MapGenFunctions.remove_enemy_autoplace_controls(map_gen_settings.autoplace_controls)

    if twoway_positive ~= MOD_NAME and twoway_positive ~= RACE_EMPTY then
        map_gen_settings.autoplace_controls[twoway_positive.."-enemy-base"] = {}
    end
    
    if twoway_negative ~= MOD_NAME and twoway_negative ~= RACE_EMPTY then
        map_gen_settings.autoplace_controls[twoway_negative.."-enemy-base"] = {}
    end
    
    if twoway_positive == MOD_NAME or twoway_negative == MOD_NAME then
        map_gen_settings.autoplace_controls["enemy-base"] = {}
    end

    for _, type in pairs(entity_types) do
        for _, entity in pairs(data.raw[type]) do
            local name_token = ForceHelper.split_name(entity.name)
            if entity.autoplace and tonumber(name_token[3]) == 1 then
                if twoway_positive ~= RACE_EMPTY and name_token[1] == twoway_positive then
                    local expression_name = create_2_way_positive_noise_expression(entity)
                    map_gen_settings.property_expression_names["entity:"..entity.name..":probability"] = expression_name
                elseif twoway_negative ~= RACE_EMPTY and name_token[1] == twoway_negative then
                    local expression_name = create_2_way_negative_noise_expression(entity)
                    map_gen_settings.property_expression_names["entity:"..entity.name..":probability"] = expression_name
                end
            end
        end
    end
elseif settings.startup['enemyracemanager-nauvis-enemy'].value == NAUVIS_4_WAY then
    local force_mapping = {
        [defines.direction.northeast] = settings.startup["enemyracemanager-4way-northeast"].value,
        [defines.direction.northwest] = settings.startup["enemyracemanager-4way-northwest"].value,
        [defines.direction.southwest] = settings.startup["enemyracemanager-4way-southwest"].value,
        [defines.direction.southeast] = settings.startup["enemyracemanager-4way-southeast"].value,
    }

    MapGenFunctions.remove_enemy_autoplace_controls(map_gen_settings.autoplace_controls)

    for direction_key, force in pairs(force_mapping) do
        if force == MOD_NAME then
            map_gen_settings.autoplace_controls["enemy-base"] = {}
        elseif force ~= RACE_EMPTY then
            map_gen_settings.autoplace_controls[force.."-enemy-base"] = {}
        end

        if force ~= RACE_EMPTY then
            for _, type in pairs(entity_types) do
                for _, entity in pairs(data.raw[type]) do
                    local name_token = ForceHelper.split_name(entity.name)
                    if entity.autoplace and name_token[1] == force and tonumber(name_token[3]) == 1 then
                        local expression_name = create_4_way_noise_expression(entity, direction_key)
                        map_gen_settings.property_expression_names["entity:"..entity.name..":probability"] = expression_name
                    end
                end
            end
        end
    end
    
end
nauvis.map_gen_settings = map_gen_settings


-- Start Enemy Base Autoplace functions --
local zero_probability_expression = function(autoplace)
    DebugHelper.print("Using zero_probability_expression")
    
    local data = 
    {
        control = "enemy-base",
        order = "b[enemy]-misc",
        force = "enemy",
        probability_expression = "0",
        richness_expression = "0",
    }

    if autoplace then
        data = {
            control = autoplace.control,
            order = autoplace.order,
            force = autoplace.force,
            probability_expression = "0",
            richness_expression = "0",
        }
    end

    return data
end

local disable_normal_biters = function()
    DebugHelper.print("Disabling Vanilla Spawners...")
    data.raw["unit-spawner"]["biter-spawner"]["autoplace"] = zero_probability_expression(data.raw["unit-spawner"]["biter-spawner"]["autoplace"])
    data.raw["unit-spawner"]["spitter-spawner"]["autoplace"] = zero_probability_expression(data.raw["unit-spawner"]["spitter-spawner"]["autoplace"])
    data.raw["turret"]["behemoth-worm-turret"]["autoplace"] = zero_probability_expression(data.raw["turret"]["behemoth-worm-turret"]["autoplace"])
    data.raw["turret"]["big-worm-turret"]["autoplace"] = zero_probability_expression(data.raw["turret"]["big-worm-turret"]["autoplace"])
    data.raw["turret"]["medium-worm-turret"]["autoplace"] = zero_probability_expression(data.raw["turret"]["medium-worm-turret"]["autoplace"])
    data.raw["turret"]["small-worm-turret"]["autoplace"] = zero_probability_expression(data.raw["turret"]["small-worm-turret"]["autoplace"])
end

-- END Enemy Base Autoplace functions --
disable_normal_biters()


--- Disable all leveled spawners / turret autoplace which are higher than level 1.
--- Let map processor handle the level.
--- Free up the number of autoplace entities.  Large number of autoplace entities lags the game when exploring new chunks
DebugHelper.print("Disabling high level spawners autoplace and hide in factoriopedia:")


for _, v in pairs(data.raw["unit-spawner"]) do
    if string.find(v.name, "--", 1, true) then
        local nameToken = String.split(v.name, "--")
        local level = tonumber(nameToken[3])
        if level and level > 1 then
            DebugHelper.print("Zero-ing:" .. v.name)
            --- Nil autoplace makes the unit not able to perform build base command. Use 0 probability instead.
            data.raw["unit-spawner"][v.name]["autoplace"] = zero_probability_expression(data.raw["unit-spawner"][v.name]["autoplace"])
        end
    end
end

for _, v in pairs(data.raw["turret"]) do
    if string.find(v.name, "--", 1, true) then
        local nameToken = String.split(v.name, "--")
        local level = tonumber(nameToken  [3])
        if level and level > 1 then
            DebugHelper.print("Zero-ing:" .. v.name)
            data.raw["turret"][v.name]["autoplace"] = zero_probability_expression(data.raw["turret"][v.name]["autoplace"])
        end
    end
end
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 7/1/2021 1:27 PM
---
local noise = require("noise")
local String = require('__stdlib__/stdlib/utils/string')
local ErmConfig = require('__enemyracemanager__/lib/global_config')
local ErmDebugHelper = require('__enemyracemanager__/lib/debug_helper')
require('__enemyracemanager__/global')
require('__enemyracemanager__/setting-constants')

local SPLIT_POINT = settings.startup['enemyracemanager-2way-group-split-point'].value
-- Add 4 chunks gap between races
local SPLIT_GAP = 64

-- Start Enemy Base Autoplace functions --
local zero_probability_expression = function()
    ErmDebugHelper.print('Using 0')
    local probability = noise.var("enemy_base_probability")
    return
    {
        control = 'enemy-base',
        order = 'b[enemy]-misc',
        force = "enemy",
        probability_expression = noise.min(probability, 0),
        richness_expression = noise.to_noise_expression(1)
    }
end

local y_axis_positive_probability_expression = function(autoplace)
    ErmDebugHelper.print('Using Y+')
    autoplace.probability_expression = noise.less_or_equal(SPLIT_POINT + SPLIT_GAP, noise.var("y")) * autoplace.probability_expression
    return autoplace
end

local y_axis_negative_probability_expression = function(autoplace)
    ErmDebugHelper.print('Using Y-')
    autoplace.probability_expression = noise.less_or_equal(noise.var("y"), SPLIT_POINT - SPLIT_GAP) * autoplace.probability_expression
    return autoplace
end

local x_axis_positive_probability_expression = function(autoplace)
    ErmDebugHelper.print('Using X+')
    autoplace.probability_expression = noise.less_or_equal(SPLIT_POINT + SPLIT_GAP, noise.var("x")) * autoplace.probability_expression
    return autoplace
end

local x_axis_negative_probability_expression = function(autoplace)
    ErmDebugHelper.print('Using X-')
    autoplace.probability_expression = noise.less_or_equal(noise.var("x"), SPLIT_POINT - SPLIT_GAP) * autoplace.probability_expression
    return autoplace
end

local process_x_axis_unit = function(v)
    local onPositive = String.find(v.name, ErmConfig.positive_axis_race(), 1, true)
    local onNegative = String.find(v.name, ErmConfig.negative_axis_race(), 1, true)

    if onPositive and onNegative and v.autoplace then
        ErmDebugHelper.print('Do nothing')
    elseif onPositive and v.autoplace then
        v.autoplace = x_axis_positive_probability_expression(v.autoplace)
    elseif onNegative and v.autoplace then
        v.autoplace = x_axis_negative_probability_expression(v.autoplace)
    else
        v.autoplace = zero_probability_expression()
    end
end

local process_x_axis = function()
    for k, v in pairs(data.raw["unit-spawner"]) do
        -- spawners
        ErmDebugHelper.print('Processing:' .. v.name)
        process_x_axis_unit(v)
    end

    for k, v in pairs(data.raw["turret"]) do
        -- turret
        ErmDebugHelper.print('Processing:' .. v.name)
        process_x_axis_unit(v)
    end
end

local process_y_axis_unit = function(v)
    local onPositive = String.find(v.name, settings.startup['enemyracemanager-2way-group-enemy-positive'].value, 1, true)
    local onNegative = String.find(v.name, settings.startup['enemyracemanager-2way-group-enemy-negative'].value, 1, true)

    if onPositive and onNegative and v.autoplace then
        ErmDebugHelper.print('Do nothing')
    elseif onPositive and v.autoplace then
        v.autoplace = y_axis_positive_probability_expression(v.autoplace)
    elseif onNegative and v.autoplace then
        v.autoplace = y_axis_negative_probability_expression(v.autoplace)
    else
        v.autoplace = zero_probability_expression()
    end
end

local process_y_axis = function()
    for _, v in pairs(data.raw["unit-spawner"]) do
        -- spawners
        ErmDebugHelper.print('Processing:' .. v.name)
        process_y_axis_unit(v)
    end

    for _, v in pairs(data.raw["turret"]) do
        -- turret
        ErmDebugHelper.print('Processing:' .. v.name)
        process_y_axis_unit(v)
    end
end

local disable_level_spawner = function(type, name, level)
    data.raw[type][MOD_NAME .. '/' .. name .. '/' .. level]['autoplace'] = zero_probability_expression()
end

local disable_level_spawners = function()
    local level = ErmConfig.MAX_LEVELS

    for i = 1, level do
        disable_level_spawner('unit-spawner', 'biter-spawner', i)
        disable_level_spawner('unit-spawner', 'spitter-spawner', i)
        disable_level_spawner('turret', 'behemoth-worm-turret', i)
        disable_level_spawner('turret', 'big-worm-turret', i)
        disable_level_spawner('turret', 'medium-worm-turret', i)
        disable_level_spawner('turret', 'small-worm-turret', i)
    end
end

local disable_normal_biters = function()
    ErmDebugHelper.print('Disabling Vanilla Spawners...')
    data.raw['unit-spawner']['biter-spawner']['autoplace'] = zero_probability_expression()
    data.raw['unit-spawner']['spitter-spawner']['autoplace'] = zero_probability_expression()
    data.raw['turret']['behemoth-worm-turret']['autoplace'] = zero_probability_expression()
    data.raw['turret']['big-worm-turret']['autoplace'] = zero_probability_expression()
    data.raw['turret']['medium-worm-turret']['autoplace'] = zero_probability_expression()
    data.raw['turret']['small-worm-turret']['autoplace'] = zero_probability_expression()
end

-- END Enemy Base Autoplace functions --


-- Remove Vanilla Bitter
if settings.startup['enemyracemanager-enable-bitters'].value == false then
    disable_normal_biters()
    disable_level_spawners()
end

-- 2 Ways Race handler
if ErmConfig.mapgen_is_2_races_split() and settings.startup['enemyracemanager-2way-group-enemy-orientation'].value == X_AXIS then
    disable_normal_biters()
    process_x_axis()
elseif ErmConfig.mapgen_is_2_races_split() and settings.startup['enemyracemanager-2way-group-enemy-orientation'].value == Y_AXIS then
    disable_normal_biters()
    process_y_axis()
end
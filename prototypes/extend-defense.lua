---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 7/1/2021 1:23 PM
---
local GlobalConfig = require("__enemyracemanager__/lib/global_config")

local copy_wall_entity = function(options)
    local type = options['type'] or nil
    local name = options['old_name'] or nil
    local new_name = options['new_name'] or nil
    local hp_multiplier = options['hp_multiplier'] or nil
    local recipe_items = options['recipe_items'] or nil
    local tech_name = options['tech_name'] or nil

    if data.raw[type][new_name] then
        return
    end

    local entity = util.table.deepcopy(data.raw[type][name])
    entity.name = new_name
    entity.localised_name = { 'entity-name.' .. new_name }
    entity.max_health = entity.max_health * hp_multiplier
    entity.minable.result = new_name

    data:extend({ entity })

    local item = util.table.deepcopy(data.raw["item"][name])
    item.name = new_name
    item.place_result = new_name
    data:extend({ item })

    local recipe = util.table.deepcopy(data.raw["recipe"][name])
    recipe.name = new_name
    recipe.ingredients = recipe_items
    recipe.results = {{type="item", name=new_name, amount=1}}

    data:extend({ recipe })

    if tech_name then
        local technology = data.raw["technology"][tech_name]
        table.insert(technology.effects, {
            type = "unlock-recipe",
            recipe = new_name
        })
    end
end

-- Change resistance values on vanilla armors
local armor_change_resistance = function(percentage_value, fixed_value)
    return {
        { type = "acid", percent = percentage_value, decrease = fixed_value },
        { type = "poison", percent = percentage_value, decrease = fixed_value },
        { type = "physical", percent = percentage_value, decrease = fixed_value },
        { type = "fire", percent = percentage_value, decrease = fixed_value },
        { type = "explosion", percent = percentage_value, decrease = fixed_value },
        { type = "laser", percent = percentage_value, decrease = fixed_value },
        { type = "electric", percent = percentage_value, decrease = fixed_value },
        { type = "cold", percent = percentage_value, decrease = fixed_value }
    }
end

local vehicle_change_resistance = function(percentage_value, fixed_value)
    return {
        { type = "acid", percent = percentage_value, decrease = fixed_value },
        { type = "poison", percent = percentage_value, decrease = fixed_value },
        { type = "physical", percent = percentage_value, decrease = fixed_value },
        { type = "fire", percent = percentage_value, decrease = fixed_value },
        { type = "explosion", percent = percentage_value, decrease = fixed_value },
        { type = "laser", percent = percentage_value, decrease = fixed_value },
        { type = "electric", percent = percentage_value, decrease = fixed_value },
        { type = "cold", percent = percentage_value, decrease = fixed_value },
        { type = "impact", percent = 90, decrease = 50 },
    }
end

local rails_change_resistance = function()
    return {
        { type = "acid", percent = 75 },
        { type = "poison", percent = 100 },
        { type = "physical", percent = 66 },
        { type = "fire", percent = 100 },
        { type = "explosion", percent = 66 },
        { type = "laser", percent = 66 },
        { type = "cold", percent = 75 },
        { type = "electric", percent = 75 }
    }
end

--- Wrap them in a check b/c some mods delete the base game prototypes. ¯\_(ツ)_/¯
if data.raw["ammo-turret"]["gun-turret"] then
    data.raw["ammo-turret"]["gun-turret"]["max_health"] = 800
end
if data.raw["electric-turret"]["laser-turret"] then
    data.raw["electric-turret"]["laser-turret"]["max_health"] = 1200    
end
if data.raw["construction-robot"]["construction-robot"] then
    data.raw["construction-robot"]["construction-robot"]["max_health"] = 250
    data.raw["construction-robot"]["construction-robot"]["resistances"] = armor_change_resistance(50, 0)
    data.raw["construction-robot"]["construction-robot"]["resistances"][4]["percent"] = 100
    -- Buff Robots, immune fire, bump all other resist to 75
    -- Construction bots are no longer repairable to preserve construction bot queue. They repair themselves in roboport
    for name, entity in pairs(data.raw["construction-robot"]) do
        table.insert(data.raw["construction-robot"][name]["flags"], "not-repairable")
    end
end
if data.raw["construction-robot"]["logistic-robot"] then
    data.raw["logistic-robot"]["logistic-robot"]["max_health"] = 250
    data.raw["logistic-robot"]["logistic-robot"]["resistances"] = armor_change_resistance(50, 0)
    data.raw["logistic-robot"]["logistic-robot"]["resistances"][4]["percent"] = 100
end



if mods['space-age'] and data.raw["ammo-turret"]["rocket-turret"] then
    data.raw["ammo-turret"]["rocket-turret"]["max_health"] = 1500
end

-- Enhance Vanilla Defenses
if settings.startup["enemyracemanager-enhance-defense"].value == true then
    -- Buff Armor
    data.raw["armor"]["light-armor"]["resistances"] = armor_change_resistance(15, 5)
    data.raw["armor"]["heavy-armor"]["resistances"] = armor_change_resistance(20, 10)
    data.raw["armor"]["modular-armor"]["resistances"] = armor_change_resistance(25, 15)
    data.raw["armor"]["power-armor"]["resistances"] = armor_change_resistance(35, 20)
    data.raw["armor"]["power-armor-mk2"]["resistances"] = armor_change_resistance(45, 20)

    if mods['space-age'] and data.raw["armor"]["mech-armor"] then
        data.raw["armor"]["mech-armor"]["resistances"] = armor_change_resistance(60, 20)
    end

    -- Buff vehicles
    data.raw["car"]["car"]["max_health"] = data.raw["car"]["car"]["max_health"] * 5
    data.raw["car"]["car"]["resistances"] = vehicle_change_resistance(30, 5)
    data.raw["car"]["tank"]["max_health"] = data.raw["car"]["tank"]["max_health"] * 4
    data.raw["car"]["tank"]["resistances"] = vehicle_change_resistance(60, 8)
    data.raw["spider-vehicle"]["spidertron"]["max_health"] = data.raw["spider-vehicle"]["spidertron"]["max_health"] * 3
    data.raw["spider-vehicle"]["spidertron"]["resistances"] = vehicle_change_resistance(50, 8)


    -- Buff vehicle gun
    data.raw["gun"]["vehicle-machine-gun"]["attack_parameters"]["damage_modifier"] = 2
    data.raw["gun"]["tank-machine-gun"]["attack_parameters"]["damage_modifier"] = 3
    --data.raw["gun"]["tank-flamethrower"]["attack_parameters"]["damage_modifier"] = 2
    --data.raw["gun"]["tank-cannon"]["attack_parameters"]["damage_modifier"] = 2
    --data.raw["gun"]["spidertron-rocket-launcher-1"]["attack_parameters"]["damage_modifier"] = 2
    --data.raw["gun"]["spidertron-rocket-launcher-2"]["attack_parameters"]["damage_modifier"] = 2
    --data.raw["gun"]["spidertron-rocket-launcher-3"]["attack_parameters"]["damage_modifier"] = 2
    --data.raw["gun"]["spidertron-rocket-launcher-4"]["attack_parameters"]["damage_modifier"] = 2

    -- Buff train
    data.raw["locomotive"]["locomotive"]["resistances"] = vehicle_change_resistance(75, 15)
    data.raw["cargo-wagon"]["cargo-wagon"]["resistances"] = vehicle_change_resistance(75, 15)
    data.raw["fluid-wagon"]["fluid-wagon"]["resistances"] = vehicle_change_resistance(75, 15)
    data.raw["artillery-wagon"]["artillery-wagon"]["resistances"] = vehicle_change_resistance(75, 15)

    --- Add additional rails
    local rail_type = {
        "straight-rail",
        "half-diagonal-rail",
        "curved-rail-a",
        "curved-rail-b",
        "elevated-straight-rail",
        "elevated-half-diagonal-rail",
        "elevated-curved-rail-a",
        "elevated-curved-rail-b",
        "rail-support",
        "rail-ramp",
        "rail-signal",
        "rail-chain-signal"
    }
    for _, rail_type in pairs(rail_type) do
        if data.raw[rail_type][rail_type] then
            data.raw[rail_type][rail_type]["resistances"] = rails_change_resistance()
        end
    end

    -- Add new walls
    data.raw["wall"]["stone-wall"]["max_health"] = 500
    copy_wall_entity({
        type = "wall",
        old_name = "stone-wall",
        new_name = "concrete-wall",
        hp_multiplier = 1.25,
        recipe_items = {
            {type="item", name="concrete", amount = 5},
            {type="item", name="stone-wall", amount = 1}
        },
        tech_name = "concrete"
    })
    data.raw["wall"]["stone-wall"]["next_upgrade"] = "concrete-wall"

    copy_wall_entity({
        type = "wall",
        old_name = "stone-wall",
        new_name = "refined-concrete-wall",
        hp_multiplier = 1.66,
        recipe_items = {
            {type="item", name="concrete-wall", amount = 1},
            {type="item", name="refined-concrete", amount = 5}
        },
        tech_name = "concrete"
    })
    data.raw["wall"]["concrete-wall"]["next_upgrade"] = "refined-concrete-wall"

    -- Buff Walls & Gates
    local walls = data.raw["wall"]
    for _, entity in pairs(walls) do
        entity["resistances"] = {
            { type = "acid", percent = 40, decrease = 0 },
            { type = "poison", percent = 100, decrease = 0 },
            { type = "physical", percent = 40, decrease = 0 },
            { type = "fire", percent = 40, decrease = 0 },
            { type = "explosion", percent = 40, decrease = 10 },
            { type = "impact", percent = 40, decrease = 45 },
            { type = "laser", percent = 40, decrease = 0 },
            { type = "electric", percent = 40, decrease = 0 },
            { type = "cold", percent = 40, decrease = 0 }
        }
    end
    data.raw["wall"]["stone-wall"]["resistances"] = {
        { type = "acid", percent = 25, decrease = 0 },
        { type = "poison", percent = 100, decrease = 0 },
        { type = "physical", percent = 25, decrease = 0 },
        { type = "fire", percent = 100, decrease = 0 },
        { type = "explosion", percent = 25, decrease = 10 },
        { type = "impact", percent = 25, decrease = 45 },
        { type = "laser", percent = 25, decrease = 0 },
        { type = "electric", percent = 25, decrease = 0 },
        { type = "cold", percent = 25, decrease = 0 }
    }
    data.raw["wall"]["refined-concrete-wall"]["resistances"] = {
        { type = "acid", percent = 50, decrease = 0 },
        { type = "poison", percent = 100, decrease = 0 },
        { type = "physical", percent = 50, decrease = 0 },
        { type = "fire", percent = 100, decrease = 0 },
        { type = "explosion", percent = 50, decrease = 10 },
        { type = "impact", percent = 50, decrease = 45 },
        { type = "laser", percent = 50, decrease = 0 },
        { type = "electric", percent = 50, decrease = 0 },
        { type = "cold", percent = 50, decrease = 0 }
    }

    local gates = data.raw["gate"]
    for _, entity in pairs(gates) do
        entity["resistances"] = {
            { type = "acid", percent = 40, decrease = 0 },
            { type = "poison", percent = 100, decrease = 0 },
            { type = "physical", percent = 40, decrease = 0 },
            { type = "fire", percent = 100, decrease = 0 },
            { type = "explosion", percent = 40, decrease = 10 },
            { type = "impact", percent = 40, decrease = 45 },
            { type = "laser", percent = 40, decrease = 0 },
            { type = "electric", percent = 40, decrease = 0 },
            { type = "cold", percent = 40, decrease = 0 }
        }
    end
end

-- Function to add or override resistances if they are missing or lower than the dataset
-- but preserve higher resistances
-- Generated by Qwen3-coder :)
local function add_missing_resistance(entity_resistances, dataset_resistances)
    -- If entity has no resistances, use the dataset directly
    if not entity_resistances then
        return dataset_resistances
    end

    -- Create a map of entity resistances for easier lookup
    local entity_res_map = {}
    for _, res in pairs(entity_resistances) do
        entity_res_map[res.type] = res
    end

    -- Process each resistance in the dataset
    for _, dataset_res in pairs(dataset_resistances) do
        local res_type = dataset_res.type
        local entity_res = entity_res_map[res_type]

        -- If entity doesn't have this resistance type, add it
        if not entity_res then
            table.insert(entity_resistances, dataset_res)
        else
            -- Compare percentages and override if dataset value is higher
            -- But preserve entity's higher resistance
            if dataset_res.percent and entity_res.percent and dataset_res.percent > entity_res.percent then
                entity_res.percent = dataset_res.percent
            end

            -- Compare decrease values and override if dataset value is higher
            -- But preserve entity's higher resistance
            if dataset_res.decrease and entity_res.decrease and dataset_res.decrease > entity_res.decrease then
                entity_res.decrease = dataset_res.decrease
            end

            -- Handle cases where entity might be missing percent or decrease values
            if dataset_res.percent and not entity_res.percent then
                entity_res.percent = dataset_res.percent
            end

            if dataset_res.decrease and not entity_res.decrease then
                entity_res.decrease = dataset_res.decrease
            end
        end
    end

    return entity_resistances
end

for _, turret in pairs(data.raw['ammo-turret']) do
    turret.resistances = add_missing_resistance(turret.resistances, {
        { type = "acid", percent = 20, decrease = 0 },
        { type = "poison", percent = 100, decrease = 0 },
        { type = "physical", percent = 25, decrease = 0 },
        { type = "fire", percent = 25, decrease = 0 },
        { type = "explosion", percent = 15, decrease = 0 },
        { type = "laser", percent = 15, decrease = 0 },
        { type = "electric", percent = 25, decrease = 0 },
        { type = "cold", percent = 10, decrease = 0 },
        { type = "impact", percent = 90, decrease = 50 },
    }) 
end

for _, turret in pairs(data.raw['artillery-turret']) do
    turret.resistances = add_missing_resistance(turret.resistances, {
        { type = "acid", percent = 15, decrease = 0 },
        { type = "poison", percent = 100, decrease = 0 },
        { type = "physical", percent = 33, decrease = 0 },
        { type = "fire", percent = 33, decrease = 0 },
        { type = "explosion", percent = 20, decrease = 0 },
        { type = "laser", percent = 10, decrease = 0 },
        { type = "electric", percent = 25, decrease = 0 },
        { type = "cold", percent = 10, decrease = 0 },
        { type = "impact", percent = 90, decrease = 50 },
    })
end

for _, turret in pairs(data.raw['electric-turret']) do
    turret.resistances = add_missing_resistance(turret.resistances, {
        { type = "acid", percent = 20, decrease = 0 },
        { type = "poison", percent = 100, decrease = 0 },
        { type = "physical", percent = 33, decrease = 0 },
        { type = "fire", percent = 20, decrease = 0 },
        { type = "explosion", percent = 20, decrease = 0 },
        { type = "laser", percent = 25, decrease = 0 },
        { type = "electric", percent = 25, decrease = 0 },
        { type = "cold", percent = 25, decrease = 0 },
        { type = "impact", percent = 90, decrease = 50 },
    })
end

for _, turret in pairs(data.raw['fluid-turret']) do
    turret.resistances = add_missing_resistance(turret.resistances, {
        { type = "acid", percent = 20, decrease = 0 },
        { type = "poison", percent = 100, decrease = 0 },
        { type = "physical", percent = 25, decrease = 0 },
        { type = "fire", percent = 33, decrease = 0 },
        { type = "explosion", percent = 10, decrease = 0 },
        { type = "laser", percent = 25, decrease = 0 },
        { type = "electric", percent = 10, decrease = 0 },
        { type = "cold", percent = 15, decrease = 0 },
        { type = "impact", percent = 90, decrease = 50 },
    })
end 
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 8/22/2023 12:32 AM
---
local AnimationDB = require('__erm_libs__/prototypes/animation_db')
local noise = require("noise")

if data.erm_menu_replacement == nil or
   settings.startup["enemyracemanager-menu-replacement-framework"].value == false or
   settings.startup["enemyracemanager-menu-replacement-race"].value == MOD_NAME
then
    return
end


local target_race = data.erm_menu_replacement[settings.startup["enemyracemanager-menu-replacement-race"].value]

if target_race == nil then
    return
end

local scale_spawner_animation = function(entity, scale)
    entity['animations'] = AnimationDB.change_scale(entity['animations'], scale, true)
end

local scale_turret_animation = function(entity, scale)
    local animation_types = {
        "attacking_animation",
        "folding_animation",
        "folded_animation",
        "preparing_animation",
        "prepared_animation",
        "prepared_alternative_animation",
        "starting_attack_animation",
        "attack_animation",
        "ending_attack_animation",
        "energy_glow_animation",
    }
    for _, anitypes in pairs(animation_types) do
        if entity[anitypes] then
            entity[anitypes] = AnimationDB.change_scale(entity[anitypes], scale, true)
        end
    end
end

local zero_probability_expression = function(probability)
    return
    {
        control = 'enemy-base',
        order = 'b[enemy]-misc',
        force = "enemy",
        probability_expression = noise.min(probability, 0),
        richness_expression = noise.to_noise_expression(1)
    }
end


local replace_entity = function(entity_type, target_race)
    local scale = 1
    if target_race[entity_type..'-scale'] then
        scale = target_race[entity_type..'-scale']
    end

    for from, to in pairs(target_race[entity_type]) do
        if DEBUG_MODE then
            log(target_race.race.."/"..to.."/"..target_race.level..' scale:'..scale)
        end
        local entity = util.table.deepcopy(data.raw[entity_type][target_race.race.."/"..to.."/"..target_race.level])
        entity.name = from
        entity.autoplace = zero_probability_expression(0)
        if entity_type == "turret" then
            scale_turret_animation(entity, scale)
        elseif entity_type == "unit-spawner" then
            scale_spawner_animation(entity, scale)
        end
        data.raw[entity_type][from] = entity
    end
end

if target_race.unit then
    replace_entity('unit', target_race)
end

if target_race.turret then
    replace_entity('turret', target_race)
end

if target_race["unit-spawner"] then
    replace_entity('unit-spawner', target_race)
end
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 03/16/2020 1:56 PM
---

local GlobalConfig = require("__enemyracemanager__/lib/global_config")
local ERM_UnitHelper = require("__enemyracemanager__/lib/rig/unit_helper")

local enemy_autoplace = require ("prototypes.enemy-autoplace")


require("util")


require("__enemyracemanager__/global")

local max_hitpoint_multiplier = settings.startup["enemyracemanager-max-hitpoint-multipliers"].value


-- Handles acid and poison resistance
local base_acid_resistance = 0
local incremental_acid_resistance = 50
-- Handles physical resistance
local base_physical_resistance = 0
local incremental_physical_resistance = 75
-- Handles laser and electric resistance
local base_electric_resistance = -50
local incremental_electric_resistance = 100
-- Handles Cold resistance
local base_cold_resistance = -100
local incremental_cold_resistance = 0

function makeLevelTurrets(level, type, distance)
    local turret = util.table.deepcopy(data.raw["turret"][type])

    local original_hitpoint = turret["max_health"]

    turret["localised_name"] = { "entity-name." .. MOD_NAME .. "--" .. turret["name"], GlobalConfig.QUALITY_MAPPING[level] }
    turret["name"] = MOD_NAME .. "--" .. turret["name"] .. "--" .. level;
    turret["max_health"] = ERM_UnitHelper.get_building_health(original_hitpoint, max_hitpoint_multiplier, level, true)
    turret["resistances"] = {
        { type = "acid", percent = ERM_UnitHelper.get_resistance(base_acid_resistance, incremental_acid_resistance, level) },
        { type = "poison", percent = ERM_UnitHelper.get_resistance(base_acid_resistance, incremental_acid_resistance, level) },
        { type = "physical", percent = ERM_UnitHelper.get_resistance(base_physical_resistance, incremental_physical_resistance, level) },
        { type = "fire", percent = 95 },
        { type = "explosion", percent = 95 },
        { type = "laser", percent = ERM_UnitHelper.get_resistance(base_electric_resistance, incremental_electric_resistance, level) },
        { type = "electric", percent = ERM_UnitHelper.get_resistance(base_electric_resistance, incremental_electric_resistance, level) },
        { type = "cold", percent = ERM_UnitHelper.get_resistance(base_cold_resistance, incremental_cold_resistance, level) }
    }
    turret["healing_per_tick"] = ERM_UnitHelper.get_building_healing(original_hitpoint, max_hitpoint_multiplier, level)

    turret["attack_parameters"]["damage_modifier"] = 0.33

    ERM_UnitHelper.modify_biter_damage(turret, level)

    turret["autoplace"] = enemy_autoplace.enemy_worm_autoplace( {
        probability_expression = "enemy_autoplace_base("..distance..", 90001)",
        force = FORCE_NAME,
        control = "hot_enemy_base"
    })
    turret["map_color"] = ERM_UnitHelper.format_map_color(settings.startup["enemyracemanager-explosive_biter_map_color"].value)

    return turret
end

if settings.startup["eb-disable-worms"].value then
    return
end

local max_level = GlobalConfig.MAX_LEVELS

for i = 1, max_level do
    data:extend({ makeLevelTurrets(i, "small-explosive-worm-turret", 0) })
    data:extend({ makeLevelTurrets(i, "medium-explosive-worm-turret", 2) })
    data:extend({ makeLevelTurrets(i, "big-explosive-worm-turret", 5) })
    data:extend({ makeLevelTurrets(i, "behemoth-explosive-worm-turret", 8) })
    data:extend({ makeLevelTurrets(i, "leviathan-explosive-worm-turret", 14) })

    if not settings.startup["eb-disable-mother"].value then
        data:extend({ makeLevelTurrets(i, "mother-explosive-worm-turret", 14) })
    end
end
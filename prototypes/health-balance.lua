---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 10/30/2024 1:55 PM
---

local include_types = {
    "agricultural-tower",
    "arithmetic-combinator",
    "assembling-machine",
    "asteroid-collector",
    "beacon",
    "boiler",
    "burner-generator",
    "decider-combinator",
    "electric-energy-interface",
    "furnace",
    "generator",
    "heat-interface",
    "infinity-pipe",
    "inserter",
    "lab",
    "market",
    "mining-drill",
    "offshore-pump",
    "pipe-to-ground",
    "pipe",
    "fusion-generator",
    "fusion-reactor",
    "power-switch",
    "programmable-speaker",
    "pump",
    "radar",
    "reactor",
    "rocket-silo-rocket",
    "selector-combinator",
    "storage-tank",
    "thruster",
    "display-panel",
    "accumulator",
    "cargo-pod",
    "constant-combinator",
    "electric-pole",
    "lamp",
    "solar-panel",
    "train-stop",
    "container",
    "infinity-container",
    "linked-container",
    "logistic-container",
    "temporary-container",
    "linked-belt",
    "loader-1x1",
    "loader",
    "splitter",
    "lane-splitter",
    "transport-belt",
    "underground-belt",
    "curved-rail-a",
    "curved-rail-b",
    "half-diagonal-rail",
    "legacy-curved-rail",
    "legacy-straight-rail",
    "straight-rail",
    "rail-ramp",
    "rail-support",
    "elevated-curved-rail-a",
    "elevated-curved-rail-b",
    "elevated-half-diagonal-rail",
    "elevated-straight-rail",
    "rail-chain-signal",
    "rail-signal",
}

local min_health = 500
for _, type in pairs(include_types) do
    if data.raw[type] then
        for _, entity in pairs(data.raw[type]) do
            if entity.max_health and (entity.type == "container" or entity.type == "logistic-container") then
                entity.max_health = math.max(entity.max_health * 2.5, min_health)
            elseif entity.max_health and entity.max_health < min_health then
                entity.max_health = math.max(entity.max_health * 2, min_health)
            end
        end
    end
end
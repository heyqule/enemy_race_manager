---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 7/1/2024 5:42 PM
---
local Event = require('__stdlib__/stdlib/event/event')

local AttackGroupBeaconProcessor = require('__enemyracemanager__/lib/attack_group_beacon_processor')
local Config = require('__enemyracemanager__/lib/global_config')
local SurfaceProcessor = require('__enemyracemanager__/lib/surface_processor')
local ForceHelper = require('__enemyracemanager__/lib/helper/force_helper')
local InterplanetaryAttacks = {}

local NAUVIS = 1

local can_perform_attack = function()
    return global.is_multi_planets_game and Config.interplanetary_attack_enable()
end

function InterplanetaryAttacks.init_globals()
    global.interplanetary_intel = global.interplanetary_intel or {}
end

function InterplanetaryAttacks.exec(race_name, target_force)
    if not can_perform_attack() then
        return nil
    end

    return game.surfaces[NAUVIS]
end

--- Scan planets for player entities on a daily basis, mark it attack-able if entity found.
function InterplanetaryAttacks.scan()
    if not can_perform_attack() then
        return
    end

    local top_profiler = game.create_profiler()
    for surface_name, race_name in pairs(SurfaceProcessor.get_attackable_surfaces()) do
        local surface_profiler = game.create_profiler()
        local surface = game.surfaces[surface_name]
        if surface and ForceHelper.can_have_enemy_on(surface) then
            --- Event to manipulate global.interplanetary_intel
            Event.dispatch({
                name = Event.get_event_name(Config.INTERPLANETARY_ATTACK_SCAN),
                intel = global.interplanetary_intel[surface.index],
                surface = surface
            })
        end
        surface_profiler.stop()
        log({ '', 'InterplanetaryAttacks.scan: '..surface_name, surface_profiler })
    end
    top_profiler.stop()
    log({ '', 'InterplanetaryAttacks.scan: ', top_profiler })
end

function InterplanetaryAttacks.set_intel(data, surface_index)
    if not type(data) == 'table' or not type(data) == nil then
        error("surface_index must be an int")
        return
    end

    if not type(surface_index) == 'number' then
        error("surface_index must be an int")
        return
    end

    global.interplanetary_intel[surface_index] = data
end

function InterplanetaryAttacks.get_intel(surface_index)
    if not type(surface_index) == 'number' then
        error("surface_index must be an int")
        return
    end

    return global.interplanetary_intel[surface_index]
end

return InterplanetaryAttacks
---
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 9/25/2022 12:58 AM
---
--- Reward player when they beat boss within the time limit.
---
local RaceSettingsHelper = require("__enemyracemanager__/lib/helper/race_settings_helper")
local DebugHelper = require("__enemyracemanager__/lib/debug_helper")
local AttackGroupBeaconProcessor = require("__enemyracemanager__/lib/attack_group_beacon_processor")

local BossRewardProcessor = {}

local can_spawn = RaceSettingsHelper.can_spawn

local default_rewards = {
    "uranium-238",
    "sulfuric-acid-barrel",
    "plastic-bar",
    "sulfur",
    "steel-plate",
    "solid-fuel",
    "piercing-rounds-magazine",
    "stone-wall",
    "light-oil-barrel",
    "petroleum-gas-barrel",
    "copper-plate",
    "iron-plate",
    "stone-brick",
    "crude-oil-barrel",
    "iron-gear-wheel",
    "iron-stick",
    "electronic-circuit",
    "coal",
    "concrete",
}

-- Up to 8 infinity chests on each boss defeat
local reward_settings = {
    {
        position_offset = { x = 32, y = 32 },
        chance = { 100, 100, 100, 100, 100 },
    },
    {
        position_offset = { x = -32, y = -32 },
        chance = { 0, 50, 100, 100, 100 },
    },
    {
        position_offset = { x = -32, y = 32 },
        chance = { 0, 0, 50, 100, 100 },
    },
    {
        position_offset = { x = 32, y = -32 },
        chance = { 0, 0, 0, 50, 100 },
    },
    -- Bonus lucky draw
    {
        position_offset = { x = 64, y = 64 },
        chance = { 25, 30, 35, 40, 45 },
    },
    {
        position_offset = { x = -64, y = -64 },
        chance = { 15, 18, 22, 27, 33 },
    },
    {
        position_offset = { x = -64, y = 64 },
        chance = { 10, 12, 14, 17, 20 },
    },
    {
        position_offset = { x = 64, y = -64 },
        chance = { 3, 5, 8, 11, 15 },
    }
}

-- Infinite chests stay for 1.5 hour.
local expire_at = 90 * minute
if TEST_MODE then
    expire_at = 1 * minute
end


local get_infinite_chest = function(force)
    return {
        name = "infinity-chest",
        force = force,
        preserve_contents_when_created = true
    }
end

local reward_data = function(entity)
    return {
        entity = entity,
        entity_position = entity.position,
        expire_at = game.tick + expire_at
    }
end

local spawn_chest = function(reward_setting, boss_data)
    local surface = boss_data.surface

    local chest = get_infinite_chest(boss_data.radar.force)
    local name = chest.name
    local force = chest.force
    local offset = reward_setting.position_offset
    local position = {
        x = boss_data.entity_position.x + offset.x,
        y = boss_data.entity_position.y + offset.y
    }

    if not surface.can_place_entity({ name = name, force = force, position = position }) then
        position = surface.find_non_colliding_position(name, position, 32, 8, true)
    end

    if position then
        local built_entity = surface.create_entity({ name = name, force = force, position = position })
        return built_entity
    end

    return nil
end

local get_item_name = function(rewards_items_data)
    return rewards_items_data[math.random(1, #rewards_items_data)]
end

function BossRewardProcessor.exec()
    local boss = storage.boss
    local reward_items_prototype = prototypes.mod_data[boss.force_name..'--boss-reward-data']
    local reward_items_data
    if reward_items_prototype and reward_items_prototype.data and reward_items_prototype.data.reward_data then
        reward_items_data = reward_items_prototype.data.reward_data
    else        
        reward_items_data = default_rewards
    end
    
    for _, value in pairs(reward_settings) do
        if (can_spawn(value["chance"][boss.boss_tier])) then
            local chest = spawn_chest(value, boss)
            if chest then
                for i=1, 2, 1 do
                    chest.set_infinity_container_filter(i, {
                        name = get_item_name(reward_items_data),
                        count = 12,
                        mode = "exactly"
                    })         
                end
                chest.destructible = false
                chest.minable = false
                chest.rotatable = false
                chest.operable = false
                table.insert(storage.boss_rewards, reward_data(chest))
                AttackGroupBeaconProcessor.create_attack_entity_beacon(chest)
            end
        end
    end
end

function BossRewardProcessor.clean_up()
    local rewards = storage.boss_rewards
    if rewards == nil or #rewards == 0 then
        return
    end
    for position, reward in pairs(rewards) do
        if game.tick > reward.expire_at and
                reward.entity and
                reward.entity.valid
        then
            DebugHelper.print("Destroy chest at " .. reward.entity_position.x .. "/" .. reward.entity_position.y)
            reward.entity.destroy();
            storage.boss_rewards[position] = nil
        end
    end
end

return BossRewardProcessor
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 12/24/2020 8:21 PM
---
---
--- References:
--- https://lua-api.factorio.com/latest/LuaForce.html
---
local Table = require('__stdlib__/stdlib/utils/table')
local String = require('__stdlib__/stdlib/utils/string')
local Event = require('__stdlib__/stdlib/event/event')

local ErmConfig = require('lib/global_config')
local ErmForceHelper = require('lib/helper/force_helper')
local ErmMapProcessor = require('lib/map_processor')

local LevelManager = {}

-- unit tier control
local tier_map = {0.4, 0.8}

-- control level 2-5
local evolution_level_map = {0.25, 0.4, 0.65, 0.8}
local max_evolution_factor_level = 5

-- Time * 200% + global_pollution * 50% + killing_spawn * 100%
local evolution_score = {60, 70, 80, 90, 100, 120, 140, 160, 180, 200, 240, 280, 320, 400, 500}

-- weapon level check at level 6 - 10
local evolution_weapon_level = {7, 9, 11, 13, 15}

local level_up_tier = function(current_tier, race_settings, race_name)
        race_settings[race_name].tier = current_tier + 1

        race_settings[race_name]['current_units_tier'] = Table.array_combine(race_settings[race_name]['current_units_tier'], race_settings[race_name]['units'][race_settings[race_name].tier])
        race_settings[race_name]['current_turrets_tier'] = Table.array_combine(race_settings[race_name]['current_turrets_tier'], race_settings[race_name]['turrets'][race_settings[race_name].tier])
        race_settings[race_name]['current_command_centers_tier'] = Table.array_combine(race_settings[race_name]['current_command_centers_tier'], race_settings[race_name]['command_centers'][race_settings[race_name].tier])
        race_settings[race_name]['current_support_structures_tier'] = Table.array_combine(race_settings[race_name]['current_support_structures_tier'], race_settings[race_name]['support_structures'][race_settings[race_name].tier])

        Event.dispatch(
                {name=Event.get_event_name(ErmConfig.EVENT_TIER_WENT_UP),
                 affected_race = race_settings[race_name] })
end

function LevelManager.calculateLevel(race_settings, forces, settings)
    for i, force in pairs(forces) do
        if force.name == 'player' or
                force.name == 'neutral' or
                force.name == 'enemy' then
            goto skip_calculate_level_for_force
        end

        game.print('Force:'..force.name)
        local force_name = force.name
        local race_name = ErmForceHelper.extract_race_name_from(force_name)

        if race_settings and race_settings[race_name] then
            local current_level = race_settings[race_name].level

            if current_level == ErmConfig.get_max_level(settings) then
                goto skip_calculate_level_for_force
            end

            local current_tier = race_settings[race_name].tier
            game.print('Level:'..current_level)
            game.print('Tier:'..current_tier)
            -- Handle Tier
            if current_tier < ErmConfig.MAX_TIER and force.evolution_factor >= tier_map[current_tier] then
                level_up_tier(current_tier, race_settings, race_name)
            end


            -- Handle Evolution Level
            if current_level < max_evolution_factor_level and force.evolution_factor >= evolution_level_map[current_level] then
                race_settings[race_name].level = current_level + 1
                Event.dispatch({
                    name=Event.get_event_name(ErmConfig.EVENT_LEVEL_WENT_UP),
                    affected_race = race_settings[race_name] })
                game.print('Enemy is now on level '..race_settings[race_name].level)
                goto skip_calculate_level_for_force
            end

            -- Handle Score Level
            local score = (force.evolution_factor_by_pollution * 0.5 + force.evolution_factor_by_time * 2 + force.evolution_factor_by_killing_spawners) * settings.startup['enemyracemanager-score-multipliers'].value
            if current_level >= max_evolution_factor_level and
                    current_level < ErmConfig.get_max_level(settings) and
                    score >= evolution_score[(current_level - max_evolution_factor_level)+1] then
                race_settings[race_name].level = current_level + 1
                Event.dispatch({
                    name=Event.get_event_name(ErmConfig.EVENT_LEVEL_WENT_UP), affected_race = race_settings[race_name] })
                game.print('Enemy is now on level '..race_settings[race_name].level)
                goto skip_calculate_level_for_force
            end
        end

        ::skip_calculate_level_for_force::
    end
end

function LevelManager.get_level_for_race(race_settings, race_name)
    if race_settings and race_settings[race_name] then
        return race_settings[race_name].level
    end
    return nil
end

function LevelManager.get_tier_for_race(race_settings, race_name)
    if race_settings and race_settings[race_name] then
        return race_settings[race_name].tier
    end
    return nil
end

function LevelManager.level_up_from_tech(race_settings, forces, current_tech)
    local techs = {
        'physical-projectile-damage-7',
        'energy-weapons-damage-7',
        'refined-flammables-7',
        'stronger-explosives-7',
    }
    local highest_tech = 0
    -- Loop non-enemy forces
    if not current_tech then
        for i, force in pairs(forces) do
            if not String.find(force.name, 'enemy') and force.research_enabled then
                for j, tech_title in pairs(techs) do

                    local tech = force.technologies[tech_title]

                    if tech and highest_tech < tech.level then
                        highest_tech = tech.level
                    end
                end
            end
        end
    end

    if highest_tech == 0 then
        return
    end
    --Set level
    for i, force in pairs(forces) do
        if force.name == 'player' or
                force.name == 'neutral' or
                force.name == 'enemy' then
            goto skip_calculate_level_for_force_by_tech
        end

        local race_name = ErmForceHelper.extract_race_name_from(force.name)

        current_level = race_settings[race_name].level

        if current_level < ErmConfig.get_max_level(settings) and
            highest_tech > 0
        then
            local leveled_up = false
            if highest_tech >= evolution_weapon_level[5] then
                race_settings[race_name].level = highest_tech - evolution_weapon_level[5] + 10
                leveled_up = true
            end

            if highest_tech < evolution_weapon_level[5] then
                for j, level in pairs(evolution_weapon_level) do
                    if highest_tech == level or highest_tech > level  then
                        race_settings[race_name].level = 5 + j
                        print("set_level ", race_settings[race_name].level)
                        leveled_up = true
                    end
                end
            end

            if leveled_up then
                for i = 1, 2 do
                    if race_settings[race_name].tier < ErmConfig.MAX_TIER then
                        level_up_tier(race_settings[race_name].tier, race_settings, race_name)
                    end
                end
                force.evolution_factor = 0.8
            end
        end

        ::skip_calculate_level_for_force_by_tech::
    end
end



function LevelManager.prepare(race_settings, forces)
    LevelManager.level_up_from_tech(race_settings, forces, false)
end


return LevelManager
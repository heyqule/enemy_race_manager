---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 12/24/2020 8:21 PM
---
--- require('__enemyracemanager__/lib/level_processor')
--- References:
--- https://lua-api.factorio.com/latest/LuaForce.html
---
local Table = require('__stdlib__/stdlib/utils/table')
local String = require('__stdlib__/stdlib/utils/string')
local Event = require('__stdlib__/stdlib/event/event')
local Math = require('__stdlib__/stdlib/utils/math')

local ErmConfig = require('lib/global_config')
local ErmForceHelper = require('lib/helper/force_helper')

local LevelManager = {}

-- unit tier control
local tier_map = {0.4, 0.8}

-- control level 2-5
local evolution_level_map = {0.25, 0.4, 0.65, 0.8}
local max_evolution_factor_level = 5

-- control level 6 - 20
local evolution_score = {120, 160, 200, 250, 300, 350, 400, 500, 600, 700, 900, 1100, 1350, 1750, 2500}

-- weapon level check at level 6 - 10
local evolution_weapon_level = {7, 9, 11, 13, 15}

local level_up_tier = function(current_tier, race_settings, race_name)
        race_settings[race_name].tier = current_tier + 1

        race_settings[race_name]['current_units_tier'] = Table.array_combine(race_settings[race_name]['current_units_tier'], race_settings[race_name]['units'][race_settings[race_name].tier])
        race_settings[race_name]['current_turrets_tier'] = Table.array_combine(race_settings[race_name]['current_turrets_tier'], race_settings[race_name]['turrets'][race_settings[race_name].tier])
        race_settings[race_name]['current_command_centers_tier'] = Table.array_combine(race_settings[race_name]['current_command_centers_tier'], race_settings[race_name]['command_centers'][race_settings[race_name].tier])
        race_settings[race_name]['current_support_structures_tier'] = Table.array_combine(race_settings[race_name]['current_support_structures_tier'], race_settings[race_name]['support_structures'][race_settings[race_name].tier])
end

function LevelManager.calculateEvolutionPoints(race_settings, forces, settings)
    for i, force in pairs(forces) do
        if String.find(force.name,'enemy') then
            local force_name = force.name
            local race_name = ErmForceHelper.extract_race_name_from(force_name)
            -- Handle Score Level
            local score = race_settings[race_name].evolution_base_point + (force.evolution_factor_by_pollution + force.evolution_factor_by_time + force.evolution_factor_by_killing_spawners) * settings.startup['enemyracemanager-score-multipliers'].value
            race_settings[race_name].evolution_point = score
        end
    end
end

function LevelManager.calculateLevel(race_settings, forces, settings)
    for i, force in pairs(forces) do
        if not String.find(force.name,'enemy') then
            goto skip_calculate_level_for_force
        end

        local force_name = force.name
        local race_name = ErmForceHelper.extract_race_name_from(force_name)

        if race_settings and race_settings[race_name] then
            local current_level = race_settings[race_name].level

            -- Handle Score Level
            local score = race_settings[race_name].evolution_base_point + (force.evolution_factor_by_pollution + force.evolution_factor_by_time + force.evolution_factor_by_killing_spawners) * settings.startup['enemyracemanager-score-multipliers'].value
            race_settings[race_name].evolution_point = score

            if current_level == ErmConfig.get_max_level(settings) then
                goto skip_calculate_level_for_force
            end

            local current_tier = race_settings[race_name].tier
            -- Handle Tier
            if current_tier < ErmConfig.MAX_TIER and force.evolution_factor >= tier_map[current_tier] then
                level_up_tier(current_tier, race_settings, race_name)
                Event.dispatch(
                        {name=Event.get_event_name(ErmConfig.EVENT_TIER_WENT_UP),
                         affected_race = race_settings[race_name] })
            end

            -- Handle Evolution Level
            if current_level < max_evolution_factor_level and force.evolution_factor >= evolution_level_map[current_level] then
                race_settings[race_name].level = current_level + 1
                Event.dispatch({
                    name=Event.get_event_name(ErmConfig.EVENT_LEVEL_WENT_UP),
                    affected_race = race_settings[race_name] })
                game.print(race_settings[race_name].race..' = L'..race_settings[race_name].level)
                goto skip_calculate_level_for_force
            end

            if current_level >= max_evolution_factor_level and
                    current_level < ErmConfig.get_max_level(settings) and
                    score >= evolution_score[(current_level - max_evolution_factor_level)+1] then
                race_settings[race_name].level = current_level + 1
                Event.dispatch({
                    name=Event.get_event_name(ErmConfig.EVENT_LEVEL_WENT_UP), affected_race = race_settings[race_name] })
                game.print(race_settings[race_name].race..' = L'..race_settings[race_name].level)
                goto skip_calculate_level_for_force
            end
        end

        ::skip_calculate_level_for_force::
    end
end

function LevelManager.calculateMultipleLevel(race_settings, forces, settings)
    for i, force in pairs(forces) do
        if force.name == 'player' or
                force.name == 'neutral' then
            goto skip_calculate_multiple_level_for_force
        end

        local force_name = force.name
        local race_name = ErmForceHelper.extract_race_name_from(force_name)

        if race_settings and race_settings[race_name] then
            local current_level = race_settings[race_name].level

            for i = current_level, ErmConfig.get_max_level(settings) do
                if current_level == ErmConfig.get_max_level(settings) then
                    goto skip_calculate_multiple_level_for_force
                end

                local current_tier = race_settings[race_name].tier
                -- Handle Tier
                if current_tier < ErmConfig.MAX_TIER and force.evolution_factor >= tier_map[current_tier] then
                    level_up_tier(current_tier, race_settings, race_name)
                end

                -- Handle Score Level
                local score = race_settings[race_name].evolution_base_point + (force.evolution_factor_by_pollution + force.evolution_factor_by_time + force.evolution_factor_by_killing_spawners) * settings.startup['enemyracemanager-score-multipliers'].value
                race_settings[race_name].evolution_point = score

                -- Handle Evolution Level
                if current_level < max_evolution_factor_level and force.evolution_factor >= evolution_level_map[current_level] then
                    race_settings[race_name].level = current_level + 1
                end

                if current_level >= max_evolution_factor_level and
                        current_level < ErmConfig.get_max_level(settings) and
                        score >= evolution_score[(current_level - max_evolution_factor_level)+1] then
                    race_settings[race_name].level = current_level + 1
                end
                current_level = race_settings[race_name].level
            end

            game.print(race_settings[race_name].race..' = L'..race_settings[race_name].level)
            Event.dispatch({
                name=Event.get_event_name(ErmConfig.EVENT_LEVEL_WENT_UP), affected_race = race_settings[race_name] })
            Event.dispatch(
                    {name=Event.get_event_name(ErmConfig.EVENT_TIER_WENT_UP),
                     affected_race = race_settings[race_name] })
        end
        ::skip_calculate_multiple_level_for_force::
    end
end

function LevelManager.get_level_for_race(race_settings, race_name)
    if race_settings and race_settings[race_name] then
        return race_settings[race_name].level
    end
    return nil
end

function LevelManager.get_tier_for_race(race_settings, race_name)
    if race_settings and race_settings[race_name] then
        return race_settings[race_name].tier
    end
    return nil
end

function LevelManager.level_up_from_tech(race_settings, forces, current_tech)
    local techs = {
        'physical-projectile-damage-7',
        'energy-weapons-damage-7',
        'refined-flammables-7',
        'stronger-explosives-7',
    }
    local highest_tech = 0
    -- Loop non-enemy forces
    if not current_tech then
        for i, force in pairs(forces) do
            if not String.find(force.name, 'enemy') and force.research_enabled then
                for j, tech_title in pairs(techs) do

                    local tech = force.technologies[tech_title]

                    if tech and highest_tech < tech.level then
                        highest_tech = tech.level
                    end
                end
            end
        end
    end

    if highest_tech == 0 then
        return
    end
    --Set level
    for i, force in pairs(forces) do
        if force.name == 'player' or
                force.name == 'neutral' then
            goto skip_calculate_level_for_force_by_tech
        end

        local race_name = ErmForceHelper.extract_race_name_from(force.name)

        current_level = race_settings[race_name].level

        if current_level < ErmConfig.get_max_level(settings) and
            highest_tech > 0
        then
            local leveled_up = false
            if highest_tech >= evolution_weapon_level[5] then
                race_settings[race_name].level = Math.min(highest_tech - evolution_weapon_level[5] + 10, ErmConfig.get_max_level(settings))
                leveled_up = true
            end

            if highest_tech < evolution_weapon_level[5] then
                for j, level in pairs(evolution_weapon_level) do
                    if highest_tech == level or highest_tech > level  then
                        race_settings[race_name].level = Math.min(5 + j, ErmConfig.get_max_level(settings))
                        print("set_level ", race_settings[race_name].level)
                        leveled_up = true
                    end
                end
            end

            if leveled_up then
                for i = 1, 2 do
                    if race_settings[race_name].tier < ErmConfig.MAX_TIER then
                        level_up_tier(race_settings[race_name].tier, race_settings, race_name)
                    end
                end

                if force.evolution_factor < 0.8 then
                    force.evolution_factor = 0.8
                end
            end

            Event.dispatch({
                name=Event.get_event_name(ErmConfig.EVENT_LEVEL_WENT_UP), affected_race = race_settings[race_name] })
            Event.dispatch(
                    {name=Event.get_event_name(ErmConfig.EVENT_TIER_WENT_UP),
                     affected_race = race_settings[race_name] })
        end

        ::skip_calculate_level_for_force_by_tech::
    end
end

function LevelManager.copyEvolutionFromEnemy(race_settings, target_force, enemy_force)
    local race_name = ErmForceHelper.extract_race_name_from(target_force.name)
    if race_settings and race_settings[race_name] then
        race_settings[race_name].evolution_base_point = (enemy_force.evolution_factor_by_pollution + enemy_force.evolution_factor_by_time + enemy_force.evolution_factor_by_killing_spawners) * settings.startup['enemyracemanager-score-multipliers'].value
        target_force.evolution_factor = enemy_force.evolution_factor
        LevelManager.calculateMultipleLevel(race_settings, game.forces, settings)
    end
end

function LevelManager.getEvolutionFactor(race)
    local new_force_name = 'enemy'
    if race ~= MOD_NAME then
        new_force_name = 'enemy_'..race
    end

    if game.forces[new_force_name] then
        return game.forces[new_force_name].evolution_factor
    end

    return 'n/a'
end

return LevelManager
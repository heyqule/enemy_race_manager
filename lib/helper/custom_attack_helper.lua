---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 7/24/2021 6:52 PM
---

require('__stdlib__/stdlib/utils/defines/time')
require('__enemyracemanager__/setting-constants')

local String = require('__stdlib__/stdlib/utils/string')
local Math = require('__stdlib__/stdlib/utils/math')
local util = require("util")

local ForceHelper = require('__enemyracemanager__/lib/helper/force_helper')
local ErmConfig = require('__enemyracemanager__/lib/global_config')

local CustomAttackHelper = {}

function CustomAttackHelper.valid(event, race_name)
    return event.source_entity and
            String.find(event.source_entity.name, race_name, 1, true) ~= nil
end

function CustomAttackHelper.init_globals()
    global.custom_attack_current_tiers = global.custom_attack_current_tiers or {}
    global.custom_attack_current_tiers_tick = global.custom_attack_current_tiers_tick or 0
end

function CustomAttackHelper.get_unit(unit_names, race_name)
    CustomAttackHelper.init_globals()

    local current_tiers = global.custom_attack_current_tiers
    if current_tiers[race_name] == nil and
        ErmConfig.is_cache_expired(global.custom_attack_current_tiers_tick, ErmConfig.CONFIG_CACHE_LENGTH)
    then
        current_tiers[race_name] = remote.call('enemy_race_manager', 'get_race_tier', race_name)
        global.custom_attack_current_tiers = current_tiers
        global.custom_attack_current_tiers_tick = game.tick
    end
    return unit_names[current_tiers[race_name]][Math.random(#unit_names[current_tiers[race_name]])]
end

function CustomAttackHelper.drop_unit(event, race_name, unit_name)
    local surface = game.surfaces[event.surface_index]
    local nameToken = remote.call('enemy_race_manager','get_name_token',event.source_entity.name)
    local level = nameToken[3]
    local position = event.source_position
    position.x = position.x + 2

    local final_unit_name = race_name .. '/' .. unit_name .. '/' .. level

    if not surface.can_place_entity({ name = final_unit_name, position = position }) then
        position = surface.find_non_colliding_position(final_unit_name, event.source_position, 10, 2, true)
    end

    if position then
        surface.create_entity({ name = final_unit_name, position = position, force = event.source_entity.force })
    end
end


return CustomAttackHelper
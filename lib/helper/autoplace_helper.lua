---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 2/4/2023 7:00 PM
---
--- Credit: Cold Biters, Alien Biomes for volume_to_noise_expression
---
local noise = require("noise")

local AutplaceHelper = {}

local function peak_to_noise_expression(variable, optimal, range)
    local distance_from_optimal = noise.ridge(variable - optimal, 0, math.huge), 10
    -- Idea is to have a plateau in the center of the rectangle,
    -- edges that taper off at a consistent slope for all rectangles (so that interactions between rectangles are predictable),
    return range - distance_from_optimal
end

local function plateau_peak_to_noise_expression(variable, optimal, range)
    -- Clamp rectangle-based peaks so that large rectangles don't become
    -- super powerful at their centers, because we want to be able to override
    -- them e.g. with beach peaks or whatever
    return noise.min(peak_to_noise_expression(variable, optimal, range) * 20, 1)
end

--- Function Credit:  Cold Biters, Alien Biomes
--- Base Game reference:
--- aux(desert - red sand): 0 - 1
--- water(moisture): 0 - 1
--- temperature: 12 - 18
--- elevation: -40 - 66
---
--- Alien Biomes reference:
--- aux(desert - red sand): 0 - 1
--- water(moisture): 0 - 1
--- temperature: -50 - 150
--- elevation: -40 - 66
--- +0.005 prevents probability falling below 0 when noise.var is at absolute end. e.g. moisture = 1 or 0
function AutplaceHelper.volume_to_noise_expression(volume)
    local result = nil

    if (volume["aux_min"] and volume["aux_max"]) then
        local aux_center = (volume["aux_min"] + volume["aux_max"]) / 2
        local aux_range = (math.abs(volume["aux_min"] - volume["aux_max"]) / 2) + 0.005
        local aux_fitness = plateau_peak_to_noise_expression(noise.var("aux"), aux_center, aux_range)
        if (result == nil) then
            result = aux_fitness
        else
            result = noise.min(result, aux_fitness)
        end
    end

    if (volume["moisture_min"] and volume["moisture_max"]) then
        local water_center = (volume["moisture_min"] + volume["moisture_max"]) / 2
        local water_range = (math.abs(volume["moisture_min"] - volume["moisture_max"]) / 2) + 0.005
        local water_fitness = plateau_peak_to_noise_expression(noise.var("moisture"), water_center, water_range)
        if (result == nil) then
            result = water_fitness
        else
            result = noise.min(result, water_fitness)
        end
    end

    if (volume["temperature_min"] and volume["temperature_max"]) then
        local temperature_center = (volume["temperature_min"] + volume["temperature_max"]) / 2
        local temperature_range = math.abs(volume["temperature_min"] - volume["temperature_max"]) / 2
        local temperature_fitness = plateau_peak_to_noise_expression(noise.var("temperature"), temperature_center, temperature_range)
        if (result == nil) then
            result = temperature_fitness
        else
            result = noise.min(result, temperature_fitness)
        end
    end

    if (volume["elevation_min"] and volume["elevation_max"]) then
        local elevation_center = (volume["elevation_min"] + volume["elevation_max"]) / 2
        local elevation_range = math.abs(volume["elevation_min"] - volume["elevation_max"]) / 2
        local elevation_fitness = plateau_peak_to_noise_expression(noise.var("elevation"), elevation_center, elevation_range)
        if (result == nil) then
            result = elevation_fitness
        else
            result = noise.min(result, elevation_fitness)
        end
    end

    return result
end

return AutplaceHelper






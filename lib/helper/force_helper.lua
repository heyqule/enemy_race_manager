---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 12/25/2020 10:43 AM
---
--- require('__enemyracemanager__/lib/helper/force_helper')
---

local String = require('__stdlib__/stdlib/utils/string')
local Table = require('__stdlib__/stdlib/utils/table')

local ForceHelper = {
    default_mod_name = 'erm_vanilla'
}

local NEUTRAL_FORCES = {
    'maze-terraforming-targets',
}

function ForceHelper.init_globals()
    global.force_entity_name_cache = global.force_entity_name_cache or {}
    global.force_race_name_cache = global.force_race_name_cache or {}
    global.enemy_force_cache = global.enemy_force_cache or {}
    global.surface_exclusion_list = global.surface_exclusion_list or {}
    global.surface_inclusion_list = global.surface_inclusion_list or {}
end

-- Remove prefix enemy_ if force isn't enemy
function ForceHelper.extract_race_name_from(force_name)
    if string.find(force_name, 'enemy_') ~= nil then
        if global.force_race_name_cache == nil then
            global.force_race_name_cache = {}
        end

        if global.force_race_name_cache[force_name] == nil then
            global.force_race_name_cache[force_name] = String.gsub(force_name, 'enemy_', '')
        end

        return global.force_race_name_cache[force_name]
    else
        return ForceHelper.default_mod_name
    end
end

function ForceHelper.get_force_name_from(race_name)
    if race_name == ForceHelper.default_mod_name then
        return 'enemy'
    end
    return 'enemy_'..race_name
end

-- Checks enemy_erm_ prefix
function ForceHelper.is_erm_unit(entity)
    return String.find(entity.name, 'erm_', 1, true) ~= nil
end

function ForceHelper.is_enemy_force(force)
    return String.find(force.name, 'enemy', 1, true)
end

function ForceHelper.set_friends(game, force_name, is_friend)
    for name, force in pairs(game.forces) do
        if String.find(force.name, 'enemy', 1, true) then
            force.set_friend(force_name, is_friend);
            force.set_friend('enemy', is_friend);
            force.set_cease_fire(force_name, is_friend);
            force.set_cease_fire('enemy', is_friend);
            game.forces[force_name].set_friend(name,is_friend)
            game.forces[force_name].set_cease_fire(name,is_friend)
        end
    end
end

function ForceHelper.set_neutral_force(game, force_name)
    for _, force in pairs(NEUTRAL_FORCES) do
        if game.forces[force] ~= nil then
            game.forces[force].set_cease_fire(force_name, true);
            game.forces[force_name].set_cease_fire(force, true);
        end
    end
end

function ForceHelper.split_name(name)
    return String.split(name, '/')
end

function ForceHelper.get_name_token(name)
    if global.force_entity_name_cache == nil then
        global.force_entity_name_cache = {}
    end

    if global.force_entity_name_cache[name] == nil then
        if not String.find(name, '/', 1, true) then
            global.force_entity_name_cache[name] = { ForceHelper.default_mod_name, name, '1' }
        else
            global.force_entity_name_cache[name] = ForceHelper.split_name(name)
        end
    end

    return global.force_entity_name_cache[name]
end

function ForceHelper.get_non_player_forces()
    return global.non_player_forces or {'neutral'}
end

function ForceHelper.get_player_forces()
    return global.player_forces or {'player'}
end

function ForceHelper.get_all_enemy_forces()
    return global.enemy_force_cache or {'enemy'}
end

function ForceHelper.refresh_all_enemy_forces()
    global.enemy_force_cache = {}
    global.non_player_forces = {}
    global.player_forces = {}
    for _, force in pairs(game.forces) do
        if force.name == 'enemy' or (String.find(force.name, 'enemy', 1, true) and game.active_mods[ForceHelper.extract_race_name_from(force.name)] ~= nil) then
            table.insert(global.enemy_force_cache, force.name)
            table.insert(global.non_player_forces, force.name)
        end
    end

    for _, value in pairs(NEUTRAL_FORCES) do
        table.insert(global.non_player_forces, value)
    end
    table.insert(global.non_player_forces, 'neutral')

    table.insert(global.player_forces, 'player')
    for _, force in pairs(game.forces) do
        if force.index ~= 1 and table_size(force.players) > 0 then
            table.insert(global.player_forces, force.name)
        end
    end
end

-- Whether a surface can assign enemy
-- Based off Rampant 3.0's surface exclusion
function ForceHelper.can_have_enemy_on(surface)
    if surface.valid then
        local surface_name = surface.name
        if global.surface_inclusion_list[surface_name] == nil and
            (
                global.surface_exclusion_list[surface_name] == true or

                string.find(surface_name, "Factory floor") or
                string.find(surface_name, " Orbit") or
                string.find(surface_name, "clonespace") or
                string.find(surface_name, "BPL_TheLabplayer") or
                string.find(surface_name, "starmap%-") or
                string.find(surface_name, "NiceFill") or
                string.find(surface_name, "Asteroid Belt") or
                string.find(surface_name, "Vault ") or
                string.find(surface_name, "spaceship") or
                string.find(surface_name,"bpsb%-lab%-") or

                (surface_name == "aai-signals") or
                (surface_name == "RTStasisRealm") or
                (surface_name == "minime_dummy_dungeon") or
                (surface_name == "minime-preview-character") or
                (surface_name == "pipelayer") or
                (surface_name == "beltlayer")
            )
        then        
            global.surface_exclusion_list[surface_name] = true
            return false
        end    

        global.surface_inclusion_list[surface_name] = true
        return true        
    end        

    return false
end

function ForceHelper.reset_surface_lists()
    global.surface_exclusion_list = {}
    global.surface_inclusion_list = {}
end

return ForceHelper
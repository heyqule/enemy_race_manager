---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 12/25/2020 10:43 AM
---
--- require("__enemyracemanager__/lib/helper/force_helper")
---
require('util')
local String = require('__erm_libs__/stdlib/string')

local ForceHelper = {
    default_force_names = {
        enemy = true,
        enemy_pentapod = true
    }
}

--- Redefine here since it can use by other mods.
local MOD_DATA_NEUTRAL_FORCES = 'ERM_neutral_forces'
local MOD_DATA_SURFACE_EXCLUSIONS = 'ERM_surface_exclusions'

local NEUTRAL_FORCES

local get_neutral_forces = function()
    if not NEUTRAL_FORCES then
        NEUTRAL_FORCES = prototypes.mod_data[MOD_DATA_NEUTRAL_FORCES].data
    end
    return NEUTRAL_FORCES
end
    
local refresh_exclusion_surface = function()
    if storage.surface_exclusion_list == nil then
        storage.surface_exclusion_list = prototypes.mod_data[MOD_DATA_SURFACE_EXCLUSIONS].data
    else
        for name, item in pairs(prototypes.mod_data[MOD_DATA_SURFACE_EXCLUSIONS].data) do
            storage.surface_exclusion_list[name] = true
        end
    end
end

function ForceHelper.init_globals()
    storage.force_entity_name_cache = storage.force_entity_name_cache or {}
    storage.force_force_name_cache = storage.force_force_name_cache or {}
    storage.enemy_force_cache = storage.enemy_force_cache or {}
    storage.surface_exclusion_list = storage.surface_exclusion_list or {}
    storage.surface_inclusion_list = storage.surface_inclusion_list or {}
    storage.enemy_force_check = storage.enemy_force_check or {}
end

-- Checks enemy_erm_ prefix
function ForceHelper.is_erm_unit(entity)
    local nameToken = ForceHelper.split_name(entity.name)
    return (storage and storage.active_races and storage.active_races[nameToken[1]]) or false
end

function ForceHelper.is_enemy_force(force)
    if type(force) ~= 'string' then force = force.name end
    return storage.enemy_force_check[force]
end

function ForceHelper.set_friends(game, force_name, is_friend)
    for name, force in pairs(game.forces) do
        if string.find(force.name, "enemy", 1, true) then
            force.set_friend(force_name, is_friend);
            force.set_friend("enemy", is_friend);
            force.set_cease_fire(force_name, is_friend);
            force.set_cease_fire("enemy", is_friend);
            game.forces[force_name].set_friend(name, is_friend)
            game.forces[force_name].set_cease_fire(name, is_friend)
        end
    end
end

function ForceHelper.set_neutral_force(game, force_name)
    for neutral_force, _ in pairs(get_neutral_forces()) do
        if game.forces[neutral_force] ~= nil then
            game.forces[neutral_force].set_cease_fire(force_name, true);
            game.forces[force_name].set_cease_fire(neutral_force, true);
        end
    end
end

function ForceHelper.split_name(name)
    if storage and storage.force_entity_name_cache and storage.force_entity_name_cache[name] then
        return storage.force_entity_name_cache[name]
    else
        return String.split(name, '--')
    end
end

function ForceHelper.get_name_token(name)
    if storage.force_entity_name_cache and storage.force_entity_name_cache[name] then
        return storage.force_entity_name_cache[name]
    end

    if storage.force_entity_name_cache == nil then
        storage.force_entity_name_cache = {}
    end

    if storage.force_entity_name_cache[name] == nil then
        if string.find(name, "--", 1, true) then
            storage.force_entity_name_cache[name] = ForceHelper.split_name(name)
        else
            return nil
        end
    end

    return storage.force_entity_name_cache[name]
end

function ForceHelper.get_non_player_forces()
    return storage.non_player_forces or { "neutral" }
end

function ForceHelper.get_player_forces()
    return storage.player_forces or { "player" }
end

function ForceHelper.get_enemy_forces()
    return storage.enemy_force_cache or { "enemy" }
end

function ForceHelper.refresh_all_enemy_forces()
    storage.enemy_force_cache = {}
    storage.non_player_forces = {}
    storage.player_forces = {}
    storage.enemy_force_check = {}
    for _, force in pairs(game.forces) do
        if ForceHelper.default_force_names[force.name] or
            (string.find(force.name, "enemy", 1, true) and
            script.active_mods[string.gsub(force.name,"enemy_","")] ~= nil) and
            storage.race_settings[force.name]
        then
            table.insert(storage.enemy_force_cache, force.name)
            storage.enemy_force_check[force.name] = true
            table.insert(storage.non_player_forces, force.name)
        end
    end
    
    for force_name, value in pairs(get_neutral_forces()) do
        table.insert(storage.non_player_forces, force_name)
    end
    table.insert(storage.non_player_forces, "neutral")

    table.insert(storage.player_forces, "player")
    for _, force in pairs(game.forces) do
        if force.index ~= 1 and table_size(force.players) > 0 then
            table.insert(storage.player_forces, force.name)
        end

        if TEST_MODE and string.find(force.name, "test") then
            table.insert(storage.player_forces, force.name)
        end
    end
    storage.total_player_forces = #storage.player_forces
    
    refresh_exclusion_surface()
end

-- Whether a surface can assign enemy
function ForceHelper.can_have_enemy_on(surface)
    if surface and surface.valid then
        local surface_name = surface.name
        if storage.surface_inclusion_list[surface_name] then
            return true
        elseif storage.surface_exclusion_list[surface_name] == true then
            return false
        elseif
            storage.surface_exclusion_list[surface_name] == true or
            (not storage.external_planets[surface_name] and 
                (not surface.planet or 
                   surface.planet.prototype.hidden == true)
            )
        then
            storage.surface_exclusion_list[surface_name] = true
            storage.enemy_surfaces[surface_name] = nil
            storage.surface_inclusion_list[surface_name] = nil
            return false
        else
            storage.surface_inclusion_list[surface_name] = true
            storage.surface_exclusion_list[surface_name] = nil
            return true
        end
    end

    return false
end

function ForceHelper.add_surface_to_exclusion_list(surface_name)
    storage.surface_exclusion_list[surface_name] = true
    storage.surface_inclusion_list[surface_name] = nil
    storage.enemy_surfaces[surface_name] = nil
end

function ForceHelper.reset_surface_from_lists(surface_name)
    storage.surface_exclusion_list[surface_name] = nil
    storage.surface_inclusion_list[surface_name] = nil
    storage.enemy_surfaces[surface_name] = nil
end

function ForceHelper.reset_surface_lists()
    storage.surface_exclusion_list = {}
    storage.surface_inclusion_list = {}
    refresh_exclusion_surface()
end

return ForceHelper
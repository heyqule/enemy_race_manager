---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 12/21/2020 4:55 PM
---
--- Reference:
--- https://lua-api.factorio.com/latest/LuaSurface.html
--- https://lua-api.factorio.com/latest/Concepts.html#ChunkPositionAndArea
---

local Table = require('__stdlib__/stdlib/utils/table')
local String = require('__stdlib__/stdlib/utils/string')
local Queue = require('__stdlib__/stdlib/misc/queue')
local Game = require('__stdlib__/stdlib/game')

local ErmConfig = require('__enemyracemanager__/lib/global_config')
local ErmForceHelper = require('__enemyracemanager__/lib/helper/force_helper')

local ReplacementProcessor = {}

local race_pick


local replace_structures = function(surface, entity, race_settings)
    local force_name = entity.force.name
    if ErmForceHelper.is_erm_unit(force_name) then
        return
    end
    local position = entity.position

    local structure_tier = race_settings[race_pick]['current_support_structures_tier']
    local strucutre_base = race_settings[race_pick]['current_command_centers_tier']
    local pick = math.random();

    local base_name = ''
    if pick < 0.3 then
        base_name = strucutre_base[math.random(1, #strucutre_base)]
    else
        base_name = structure_tier[math.random(1, #structure_tier)]
    end

    local name = race_settings[race_pick].race .. '-' ..base_name.. '-' .. race_settings[race_pick].level
    entity.destroy()
    surface.create_entity({name = name, position = position, force='enemy_'..race_settings[race_pick].race})
end

local replace_turrets = function(surface, entity, race_settings)
    local force_name = entity.force.name
    if ErmForceHelper.is_erm_unit(force_name) then
        return
    end
    local position = entity.position
    local turret_tier = race_settings[race_pick]['current_turrets_tier']
    local base_name = turret_tier[math.random(1, #turret_tier)]
    local name = race_settings[race_pick].race .. '-' ..base_name.. '-' .. race_settings[race_pick].level
    entity.destroy()
    surface.create_entity({name = name, position = position, force='enemy_'..race_pick})
end

function ReplacementProcessor.process_chunks(surface, area, race_settings)
    local spawners = Table.filter(surface.find_entities_filtered({area = area, type = 'unit-spawner'}), Game.VALID_FILTER)
    local spawners_size = Table.size(spawners)
    if spawners_size > 0 then
        Table.each(spawners, function(entity)
            replace_structures(surface, entity, race_settings)
        end)
    end

    local turrets = Table.filter(surface.find_entities_filtered({area = area, type = 'turret'}), Game.VALID_FILTER)
    local turret_size = Table.size(turrets)
    if turret_size > 0 then
        Table.each(turrets, function(entity)
            replace_turrets(surface, entity, race_settings)
        end)
    end
end

function ReplacementProcessor.rebuildMap(game, race_settings)
    for i,surface in pairs(game.surfaces) do
        local race_names = Table.keys(race_settings, false, true)
        race_pick = race_names[math.random(1, table_size(race_names))]

        for chunk in surface.get_chunks() do
            ReplacementProcessor.process_chunks(surface, chunk.area, race_settings)
        end
    end
end

return ReplacementProcessor
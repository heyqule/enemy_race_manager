---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 7/21/2021 10:45 PM
---

local String = require('__stdlib__/stdlib/utils/string')

local ErmConfig = require('__enemyracemanager__/lib/global_config')
local ErmForceHelper = require('__enemyracemanager__/lib/helper/force_helper')
local ErmRaceSettingsHelper = require('__enemyracemanager__/lib/helper/race_settings_helper')
local ErmDebugHelper = require('__enemyracemanager__/lib/debug_helper')

local ErmCron = require('__enemyracemanager__/lib/cron_processor')

local AttackGroupProcessor = {}

AttackGroupProcessor.MIXED_UNIT_POINTS = 20
AttackGroupProcessor.FLYING_UNIT_POINTS = 75
AttackGroupProcessor.DROPSHIP_UNIT_POINTS = 150

AttackGroupProcessor.UNIT_PER_BATCH = 5

AttackGroupProcessor.GROUP_AREA = 256

AttackGroupProcessor.GROUP_TYPE_MIXED = 1
AttackGroupProcessor.GROUP_TYPE_FLYING = 2
AttackGroupProcessor.GROUP_TYPE_DROPSHIP = 3

AttackGroupProcessor.GROUP_TIERS = {
    {1},
    {0.7, 0.3},
    {0.4, 0.35, 0.25}
}

AttackGroupProcessor.NORMAL_HUNTER_TARGET_TYPES = {
    'mining-drill',
    'rocket-silo',
    'artillery-turret',
}

AttackGroupProcessor.HARDCORE_HUNTER_TARGET_TYPES = {
    'lab',
    'furnace',
    'roboport'
}

AttackGroupProcessor.EXTREME_HUNTER_TARGET_TYPES = {
    'assembling-machine',
    'generator',
    'solar-panel',
    'accumulator',
}

---
--- Track unit group, each race should only have 1 active group.
--- Units in a group seems considered active units and they have performance penalty.
---
local group_tracker = {}

local mixed_chance = 100

--- Pick surface with player entity.
local pick_surface = function()
    return game.surfaces[1]
end

local pick_an_unit = function(race_name)
    local current_tier = group_tracker[race_name].current_tier
    local unit_name = nil
    if group_tracker[race_name].group_type == AttackGroupProcessor.GROUP_TYPE_MIXED then
        unit_name = ErmRaceSettingsHelper.pick_an_unit_from_tier(race_name, current_tier)
    elseif group_tracker[race_name].group_type == AttackGroupProcessor.GROUP_TYPE_FLYING then
        unit_name = ErmRaceSettingsHelper.pick_an_flying_unit_from_tier(race_name, current_tier)
    else
        unit_name = ErmRaceSettingsHelper.pick_an_unit(race_name)
    end

    group_tracker[race_name].current_tier_unit = group_tracker[race_name].current_tier_unit + 1

    if group_tracker[race_name].current_tier_unit == group_tracker[race_name].tiers[current_tier] then
        group_tracker[race_name].current_tier_unit = 0
        group_tracker[race_name].current_tier = math.min(current_tier + 1, ErmConfig.MAX_TIER)
    end

    return unit_name
end

local add_to_group = function(surface, group, force, race_name, unit_batch)
    if group.valid == false or group_tracker[race_name] == nil then
        return
    end

    local i = 0
    repeat
        local unit_name = pick_an_unit(race_name)
        local unit_full_name = ErmRaceSettingsHelper.get_race_entity_name(race_name, unit_name)
        local position = surface.find_non_colliding_position(unit_full_name, group.position,
                AttackGroupProcessor.GROUP_AREA, 1)
        local entity = surface.create_entity({
            name = unit_full_name,
            position = position,
            force = force
        })
        group.add_member(entity)
        group_tracker[race_name].current_size = group_tracker[race_name].current_size + 1
        i = i + 1
    until i == unit_batch


    if group_tracker[race_name].current_size >= group_tracker[race_name].size then
        local enemy = group.surface.find_nearest_enemy {
            position = group.position,
            force = group.force,
            max_distance = 3200
        }

        if enemy then
            group.set_command({
                type = defines.command.attack_area,
                destination = enemy.position,
                radius = math.random(8, 16)
            })
            global.erm_unit_groups[group.group_number] = group
        else
            group.set_autonomous()
        end
        group_tracker[race_name] = nil
    end
end

local pick_gathering_location = function(surface, force, race_name)
    local ccs = ErmRaceSettingsHelper.get_current_command_centers(race_name)
    local ccs_names = {}
    for _, cc in pairs(ccs) do
        table.insert(ccs_names, ErmRaceSettingsHelper.get_race_entity_name(race_name, cc))
    end
    --- @todo make it better, get chunks from different part of the surface, instead of always from top-left
    local cc_entities = surface.find_entities_filtered
    ({
        force = force,
        name = ccs_names,
        limit = 100
    })

    if cc_entities == nil then
        return nil
    end

    local total_cc = #cc_entities;
    local target_cc = cc_entities[math.random(1, total_cc)]
    return surface.find_non_colliding_position(target_cc.name, target_cc.position, AttackGroupProcessor.GROUP_AREA, 1)
end

local generate_unit_queue = function(surface, center_location, force, race_name, units_number, group_type)
    if group_type == nil then
        group_type = AttackGroupProcessor.GROUP_TYPE_MIXED
    end
    local unit_group = surface.create_unit_group({position = center_location, force = force})
    local queue_length = math.ceil(units_number / AttackGroupProcessor.UNIT_PER_BATCH)
    local last_queue = queue_length - 1
    local last_queue_unit = units_number % AttackGroupProcessor.UNIT_PER_BATCH
    if last_queue_unit == 0 then
        last_queue_unit = AttackGroupProcessor.UNIT_PER_BATCH
    end
    local i = 0

    local tiers = nil
    if group_type == AttackGroupProcessor.GROUP_TYPE_FLYING then
        local level = ErmRaceSettingsHelper.get_level(race_name) - 1
        if level == 0 then
            level = 1
        end
        tiers = AttackGroupProcessor.GROUP_TIERS[ math.min(level, ErmConfig.MAX_TIER) ]
    else
        tiers = AttackGroupProcessor.GROUP_TIERS[ ErmRaceSettingsHelper.get_tier(race_name) ]
    end
    local tiers_units = {}
    for index, tier in pairs(tiers) do
        tiers_units[index] = math.floor((units_number * tier)+0.5)
    end

    group_tracker[race_name] = {
        group = unit_group,
        group_number = unit_group.group_number,
        size = units_number,
        current_size = 0,
        group_type = group_type,
        tiers = tiers_units,
        current_tier = 1,
        current_tier_unit = 0,
    }
    repeat
        local unit_batch = AttackGroupProcessor.UNIT_PER_BATCH
        if i == last_queue then
            unit_batch = last_queue_unit
        end
        ErmCron.add_1_sec_queue(
                function(arg)
                    add_to_group(arg[1], arg[2],arg[3],arg[4],arg[5])
                end,
                surface,
                unit_group,
                force,
                race_name,
                unit_batch
        )
        i = i + 1
    until i == queue_length
end

function AttackGroupProcessor.exec(race_name, force, attack_points)
    local flying_group_chance = 0
    local flying_enabled = ErmConfig.flying_group_enabled() and ErmRaceSettingsHelper.has_flying_unit(race_name)
    if flying_enabled then
        flying_group_chance = ErmConfig.flying_group_chance()
    end

    local total_chance = mixed_chance + flying_group_chance
    local pick_number = math.random(1, total_chance)
    local status = false
    --- Flying Squad starts at level 2.  Max tier at level 4
    if flying_enabled and ErmRaceSettingsHelper.get_level(race_name) > 1 and
            pick_number > mixed_chance and pick_number <= mixed_chance + flying_group_chance then
        local units_number = math.ceil(attack_points / AttackGroupProcessor.FLYING_UNIT_POINTS)
        status = AttackGroupProcessor.generate_group(race_name, force, units_number, AttackGroupProcessor.GROUP_TYPE_FLYING)

        --- @TODO Add Dropship Squad :)

    else
        local units_number = math.ceil(attack_points / AttackGroupProcessor.MIXED_UNIT_POINTS)
        status = AttackGroupProcessor.generate_group(race_name, force, units_number)
    end

    return status
end    

function AttackGroupProcessor.generate_group(race_name, force, units_number, type)
    local surface = pick_surface()
    local center_location = pick_gathering_location(surface, force, race_name)
    if surface and center_location then
        generate_unit_queue(surface, center_location, force, race_name, units_number, type)
    end
end

return AttackGroupProcessor
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 11/7/2022 10:25 PM
---
local ForceHelper = require("__enemyracemanager__/lib/helper/force_helper")
local BASE_MAX_UNIT = 150

local ArmyPopulationProcessor = {}

local get_max_pop = function(maximum_following_robot_count)
    return  math.floor((BASE_MAX_UNIT + maximum_following_robot_count) * settings.global["enemyracemanager-army-limit-multiplier"].value)
end

local set_default_values = function(force)
    local default_values = {
        max_pop = get_max_pop(force.maximum_following_robot_count),
        unit_count = 0,
        pop_count = 0,
        unit_types = {},
        auto_deploy = {},
    }

    for name, value in pairs(storage.army_registered_units) do
        if not default_values["unit_types"][name] then
            default_values["unit_types"][name] = { pop_count = 0, unit_count = 0 }
        end

        default_values["auto_deploy"][name] = math.floor(50 / value)
    end

    return default_values
end

local init_force_data = function(force, force_reset)
    force_reset = force_reset or false
    local preserve_auto_deploy
    if storage.army_populations[force.name] and force_reset then
        preserve_auto_deploy = storage.army_populations[force.name]["auto_deploy"]
    end

    if not storage.army_populations[force.name] or force_reset then
        storage.army_populations[force.name] = set_default_values(force)
    end

    if preserve_auto_deploy then
        storage.army_populations[force.name]["auto_deploy"] = preserve_auto_deploy
    end
end

function ArmyPopulationProcessor.init_globals()
    storage.army_populations = storage.army_populations or {}
    --- Store player spawnable army unit names
    storage.army_registered_units = storage.army_registered_units or {}
end

function ArmyPopulationProcessor.register_unit(unit_name, pop_count)
    if storage.army_registered_units == nil then
        storage.army_registered_units = {}
    end

    storage.army_registered_units[unit_name] = pop_count
end

function ArmyPopulationProcessor.index()
    local profiler = game.create_profiler()
    local army_registered_units = storage.army_registered_units
    ArmyPopulationProcessor.init_globals()
    if army_registered_units == nil or table_size(army_registered_units) == 0 then
        return
    end

    local playerForces = ForceHelper.get_player_forces()
    for _, force in pairs(playerForces) do
        init_force_data(game.forces[force], true)
    end

    for _, surface in pairs(game.surfaces) do
        if surface.valid then
            local units = surface.find_entities_filtered({
                type = "unit",
                force = ForceHelper.get_player_forces()
            })
            for _, unit in pairs(units) do
                if army_registered_units[unit.name] then
                    ArmyPopulationProcessor.add_unit_count(unit, army_registered_units[unit.name])
                end
            end
        end
    end
    profiler.stop()
    game.print({ "", "Rebuild Player Army Index: ", profiler })
end

function ArmyPopulationProcessor.calculate_max_units(force)
    init_force_data(force)
    storage.army_populations[force.name]["max_pop"] = get_max_pop(force.maximum_following_robot_count)
    force.print("Max Army Population: " .. storage.army_populations[force.name]["max_pop"])
end

function ArmyPopulationProcessor.can_place_unit(unit)
    local unit_force = unit.force
    init_force_data(unit_force)
    return storage.army_populations[unit_force.name]["max_pop"] >= (storage.army_populations[unit_force.name]["pop_count"] + storage.army_registered_units[unit.name])

end

function ArmyPopulationProcessor.add_unit_count(unit)
    local unit_name = unit.name
    local unit_force = unit.force
    init_force_data(unit_force)
    local army_registered_units = storage.army_registered_units
    local army_pop = storage.army_populations
    if unit_force and army_registered_units[unit_name] then

        local pop = army_registered_units[unit_name]
        local force_name = unit_force.name
        army_pop[force_name]["pop_count"] = army_pop[force_name]["pop_count"] + pop
        army_pop[force_name]["unit_count"] = army_pop[force_name]["unit_count"] + 1
        army_pop[force_name]["unit_types"][unit_name]["unit_count"] = army_pop[force_name]["unit_types"][unit_name]["unit_count"] + 1
        army_pop[force_name]["unit_types"][unit_name]["pop_count"] = army_pop[force_name]["unit_types"][unit_name]["pop_count"] + pop
    end
end

function ArmyPopulationProcessor.remove_unit_count(unit)
    local unit_name = unit.name
    local unit_force = unit.force
    local army_registered_units = storage.army_registered_units
    local army_pop = storage.army_populations
    if unit_force and army_registered_units[unit_name] then
        local pop = army_registered_units[unit_name]
        local force_name = unit_force.name
        army_pop[force_name]["pop_count"] = army_pop[force_name]["pop_count"] - pop
        army_pop[force_name]["unit_count"] = army_pop[force_name]["unit_count"] - 1
        army_pop[force_name]["unit_types"][unit_name]["unit_count"] = army_pop[force_name]["unit_types"][unit_name]["unit_count"] - 1
        army_pop[force_name]["unit_types"][unit_name]["pop_count"] = army_pop[force_name]["unit_types"][unit_name]["pop_count"] - pop
    end
end

function ArmyPopulationProcessor.is_army_unit(unit)
    local unit_name = unit.name
    local army_registered_units = storage.army_registered_units
    if army_registered_units[unit_name] then
        return true
    end

    return false
end

function ArmyPopulationProcessor.get_army_data(force)
    if storage.army_populations[force.name] == nil then
        init_force_data(force)
    end

    return storage.army_populations[force.name]
end

function ArmyPopulationProcessor.has_army_data(force)
    return storage.army_populations[force.name] ~= nil
end

function ArmyPopulationProcessor.max_pop(force)
    return storage.army_populations[force.name].max_pop
end

function ArmyPopulationProcessor.pop_count(force)
    return storage.army_populations[force.name].pop_count
end

function ArmyPopulationProcessor.unit_count(force)
    return storage.army_populations[force.name].unit_count
end

function ArmyPopulationProcessor.unit_count_by_name(force, name)
    return storage.army_populations[force.name]["unit_types"][name]["unit_count"]
end

function ArmyPopulationProcessor.unit_population(name)
    return storage.army_registered_units[name]
end

function ArmyPopulationProcessor.set_auto_deploy_unit_count(player, force, name, unit_count)
    if unit_count < 1 then
        player.print("You can not set deploy planner to fewer than 1 unit.")
        return false
    end
    storage.army_populations[force.name]["auto_deploy"][name] = unit_count
    return true
end

function ArmyPopulationProcessor.get_auto_deploy_unit_count(force, name)
    return storage.army_populations[force.name]["auto_deploy"][name] or 1
end

function ArmyPopulationProcessor.is_under_max_pop(force)
    return ArmyPopulationProcessor.pop_count(force) < ArmyPopulationProcessor.max_pop(force)
end

function ArmyPopulationProcessor.is_under_max_auto_deploy(force, name)
    return ArmyPopulationProcessor.unit_count_by_name(force, name) < ArmyPopulationProcessor.get_auto_deploy_unit_count(force, name)
end

return ArmyPopulationProcessor
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 11/5/2022 11:13 AM
---

require('util')

local GlobalConfig = require("__enemyracemanager__/lib/global_config")

local SurfaceProcessor = require("__enemyracemanager__/lib/surface_processor")
local RaceSettingsHelper = require("__enemyracemanager__/lib/helper/race_settings_helper")
local QualityProcessor = require("__enemyracemanager__/lib/quality_processor")

--- Detail Windows
local DetailWindow = {
    root_name = "erm_races_manager_detail",
    window_width = 720,
}


--- Detail Windows functions
function DetailWindow.show(player, race_setting)
    local gui = player.gui.screen
    if gui[DetailWindow.root_name] then
        return
    end
    local detail_window = gui.add {
        type = "frame",
        name = DetailWindow.root_name,
        direction = "vertical",
    }
    detail_window.force_auto_center()
    DetailWindow.parent_window = player.opened
    player.opened = detail_window

    local admin = player.admin
    local surface_name = player.surface.name
    --- fallback to nauvis if player is not on a planet.
    if not game.planets[surface_name] then
        surface_name = 'nauvis'
    end

    local points = QualityProcessor.get_quality_point(race_setting.race, surface_name) or 0
    -- Race Manager Title
    local title_flow = detail_window.add { type = "flow", name = "title_flow", direction = "horizontal" }
    title_flow.style.minimal_width = DetailWindow.window_width

    local title = title_flow.add { type = "label", name = "title", caption = { "gui.detail_title", race_setting.label }, style = "caption_label" }

    local pusher = title_flow.add { type = "empty-widget", style = "draggable_space_header" }
    pusher.style.vertically_stretchable = true
    pusher.style.horizontally_stretchable = true
    pusher.drag_target = detail_window

    local close_button = title_flow.add { type = "sprite-button",
                                          name = "erm_detail_close_button",
                                          sprite = "utility/close",
                                          style = "frame_action_button",
                                          tooltip = { "gui.back-instruction" }
    }
    close_button.style.width = 24
    close_button.style.height = 24
    close_button.style.horizontal_align = "right"

    local main_flow = detail_window.add { type = "flow", direction = "horizontal" }
    local left_flow = main_flow.add { type = "flow", direction = "vertical" }
    left_flow.style.width = DetailWindow.window_width / 2

    local item_table = left_flow.add { type = "table", column_count = 2, style = "bordered_table" }
    item_table.style.horizontally_stretchable = true

    item_table.add { type = "label", caption = { "gui.race_column" } }
    item_table.add { type = "label", caption = race_setting.label }

    item_table.add { type = "label", caption = { "gui.tier_column" } }
    item_table.add { type = "label", caption = race_setting.tier }

    item_table.add { type = "label", caption = { "gui.evolution_column" } }
    item_table.add { type = "label", caption = string.format("%.2f", game.forces[race_setting.race].get_evolution_factor(surface_name) * 100) .. "% @ [space-location="..surface_name.."]"  .. surface_name }

    item_table.add { type = "label", caption = { "gui.progress_column" } }
    item_table.add { type = "label", caption = (points / 100) .. "% @ [space-location="..surface_name.."] " .. surface_name }

    item_table.add { type = "label", caption = { "gui.attack_column" } }
    item_table.add { type = "label", caption = race_setting.attack_meter .. " / " .. race_setting.next_attack_threshold }

    item_table.add { type = "label", caption = { "gui.total_attack_column" } }
    item_table.add { type = "label", caption = race_setting.attack_meter_total }

    local unit_killed_count = race_setting.unit_killed_count or 0
    item_table.add { type = "label", caption = { "gui.total_unit_killed" } }
    item_table.add { type = "label", caption = unit_killed_count }

    local structure_killed_count = race_setting.structure_killed_count or 0
    item_table.add { type = "label", caption = { "gui.total_structures_killed" } }
    item_table.add { type = "label", caption = structure_killed_count }

    local boss_tier = race_setting.boss_tier or 1
    item_table.add { type = "label", caption = { "gui.boss_tier" } }
    item_table.add { type = "label", caption = boss_tier }

    local boss_kill_count = race_setting.boss_kill_count or 0
    item_table.add { type = "label", caption = { "gui.boss_kill_count" } }
    item_table.add { type = "label", caption = boss_kill_count }

    local right_flow = main_flow.add { type = "flow", direction = "vertical" }
    right_flow.style.width = DetailWindow.window_width / 2

    local boss_flow = right_flow.add { type = "flow", name = "quality_points_flow", direction = "vertical" }
    boss_flow.add { type = "label", name = "quality_points_details_description", caption = { "gui.quality_points_details_description" } }
    boss_flow.add { type = "button", name = race_setting.race .. "/quality_points_details", tags={filter_pattern=".*/quality_points_details"}, caption = { "gui.quality_points_details" } }

    local boss_flow = right_flow.add { type = "flow", name = "boss_flow", direction = "vertical" }
    boss_flow.add { type = "label", name = "boss_flow_description", caption = { "gui.boss_flow_description" } }
    boss_flow.add { type = "button", name = race_setting.race .. "/boss_details", tags={filter_pattern=".*/boss_details"}, caption = { "gui.boss_details" } }

    if admin then
        local reset_attack_points_flow = right_flow.add { type = "flow", name = "reset_attack_points_flow", direction = "vertical" }
        reset_attack_points_flow.add { type = "label", name = "reset_attack_points_description", caption = { "gui.reset_attack_points_description" } }
        reset_attack_points_flow.add { type = "button", name = race_setting.race .. "/reset_attack_points", tags={filter_pattern=".*/reset_attack_points"}, caption = { "gui.reset_attack_points" },  style = "red_button" }
    end
end

function DetailWindow.hide(player)
    player.gui.screen[DetailWindow.root_name].destroy()
end

function DetailWindow.toggle_close(owner)
    if owner then
        DetailWindow.hide(owner)
    end
end

function DetailWindow.reset_active_attack_points(owner, race_name)
    if owner then
        RaceSettingsHelper.set_attack_meter(race_name, 0)
        owner.force.print({"gui.reset_active_attack_points_force", owner.name, race_name})
    end
end

return DetailWindow
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 11/15/2024 11:19 AM
---
require('util')
local GlobalConfig = require("__enemyracemanager__/lib/global_config")
local QualityProcessor = require("__enemyracemanager__/lib/quality_processor")

--- Quality Point Windows
local QualityPointWindow = {
    root_name = "erm_quality_point_window",
    window_width = 680,
    window_height = 400,
}


function QualityPointWindow.show(player, force_name)
    local gui = player.gui.screen
    if gui[QualityPointWindow.root_name] then
        return
    end
    local detail_window = gui.add {
        type = "frame",
        name = QualityPointWindow.root_name,
        direction = "vertical",
    }
    detail_window.force_auto_center()
    QualityPointWindow.parent_window = player.opened
    player.opened = detail_window

    -- Race Manager Title
    local title_flow = detail_window.add { type = "flow", name = "title_flow", direction = "horizontal" }
    title_flow.style.minimal_width = QualityPointWindow.window_width

    local title = title_flow.add { type = "label", name = "title", caption = { "gui.quality_points_window", race_name }, style = "caption_label" }

    local pusher = title_flow.add { type = "empty-widget", style = "draggable_space_header" }
    pusher.style.width = QualityPointWindow.window_width - 24 - 175
    pusher.style.height = 24
    pusher.drag_target = detail_window

    local close_button = title_flow.add { type = "sprite-button",
                                          name = "erm_quality_points_detail_close_button",
                                          sprite = "utility/close",
                                          style = "frame_action_button",
                                          tooltip = { "gui.back-instruction" }
    }
    close_button.style.width = 24
    close_button.style.height = 24
    close_button.style.horizontal_align = "right"

    local main_flow = detail_window.add { type = "flow", direction = "vertical" }
    local item_table = main_flow.add { type = "table", column_count = 9, style = "bordered_table" }
    item_table.style.horizontally_stretchable = true

    item_table.add { type = "label", caption = { "gui.surface_title" } }
    item_table.add { type = "label", caption = { "gui.progress_title" } }
    item_table.add { type = "label", caption = { "gui.normal_quality_title" } }
    item_table.add { type = "label", caption = { "gui.great_quality_title" } }
    item_table.add { type = "label", caption = { "gui.exceptional_quality_title" } }
    item_table.add { type = "label", caption = { "gui.epic_quality_title" } }
    item_table.add { type = "label", caption = { "gui.legendary_quality_title" } }
    item_table.add { type = "label", caption = { "gui.planet_unit_kill_count" } }
    item_table.add { type = "label", caption = { "gui.planet_structure_kill_count" } }

    local dataset = QualityProcessor.get_data_set(force_name)
    local structure_kills = storage.race_settings[force_name].structure_killed_count_by_planet
    local unit_kills = storage.race_settings[force_name].unit_killed_count_by_planet
    for surface_name, data in pairs(dataset) do
        local calculated_rates = {0, 0, 0, 0, 0}
        local surface_str = "[space-location="..surface_name.."] "..surface_name

        if storage.race_settings[force_name].home_planet == surface_name then
            calculated_rates = {100, 0, 0, 0, 0}
            surface_str = surface_str .. ' (Home)'
        elseif data.spawn_rates then
            for key, value in pairs(data.spawn_rates) do
                calculated_rates[key] = value * 100
            end
        end

        --- Rolls from left(legendary) to right(normal)
        item_table.add { type = "label", caption = surface_str  }
        item_table.add { type = "label", caption = (data.points / 100) .. '%' }
        item_table.add { type = "label", caption = string.format("%.2f",calculated_rates[5]) .. "%" }
        item_table.add { type = "label", caption = string.format("%.2f",calculated_rates[4]) .. "%" }
        item_table.add { type = "label", caption = string.format("%.2f",calculated_rates[3]) .. "%" }
        item_table.add { type = "label", caption = string.format("%.2f",calculated_rates[2]) .. "%" }
        item_table.add { type = "label", caption = string.format("%.2f",calculated_rates[1]) .. "%" }
        item_table.add { type = "label", caption = (unit_kills[surface_name] or 0) }
        item_table.add { type = "label", caption = (structure_kills[surface_name] or 0) }
    end
    main_flow.add { type = "label", name = "quality_points_home_planet_description", caption = { "gui.quality_points_home_planet_description" } }

end

function QualityPointWindow.hide(player)
    player.gui.screen[QualityPointWindow.root_name].destroy()
end

function QualityPointWindow.toggle_close(owner)
    if owner then
        QualityPointWindow.hide(owner)
    end
end

function QualityPointWindow.update_data_box(element, owner)
    if owner and element then

    end
end


return QualityPointWindow

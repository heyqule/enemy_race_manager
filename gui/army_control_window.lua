---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 11/15/2022 9:44 PM
---
local mod_gui = require('mod-gui')
local String = require('__stdlib__/stdlib/utils/string')

local SharedGuiFunctions = require('__enemyracemanager__/gui/shared')
local ArmyPopulationProcessor = require("__enemyracemanager__/lib/army_population_processor")
local ArmyTeleportationProcessor = require("__enemyracemanager__/lib/army_teleportation_processor")
local ArmyDeploymentProcessor = require("__enemyracemanager__/lib/army_deployment_processor")

local UnitTab = require("__enemyracemanager__/gui/army_tabs/unit_control")
local DeployerTab = require("__enemyracemanager__/gui/army_tabs/deployer_control")
local CCTab = require("__enemyracemanager__/gui/army_tabs/cc_control")
local HelpTab = require("__enemyracemanager__/gui/army_tabs/help")
local SharedTabFunctions = require('__enemyracemanager__/gui/army_tabs/shared')

local Army_MainWindow = {
    require_update_all = false,
    root_name = SharedTabFunctions.root_name,
    window_width = 820,
    window_height = 400,
    tab_ids = {
        [UnitTab.name] = 1,
        [DeployerTab.name] = 2,
        [CCTab.name] = 3,
        [HelpTab.name] = 4,
    },
    tab_names = {
        UnitTab.name, DeployerTab.name, CCTab.name, HelpTab.name
    },
    start_link_button = CCTab.start_link_button,
    stop_link_button = CCTab.stop_link_button
}

local update_tabs = {
    [UnitTab.name] = UnitTab.update,
    [DeployerTab.name] = DeployerTab.update,
    [CCTab.name] = CCTab.update,
    [HelpTab.name] = HelpTab.update,
}

function Army_MainWindow.show(player)
    local gui = player.gui.screen
    if gui[SharedTabFunctions.root_name] then
        return
    end
    local main_window = gui.add {
        type = "frame",
        name = SharedTabFunctions.root_name,
        direction = "vertical",
    }
    main_window.force_auto_center()

    main_window.style.maximal_width = Army_MainWindow.window_width
    main_window.style.minimal_width = Army_MainWindow.window_width
    main_window.style.maximal_height = Army_MainWindow.window_height * 1.55
    main_window.style.minimal_height = Army_MainWindow.window_height * 0.75
    -- Race Manager Title
    local title_flow = main_window.add { type = 'flow', name = 'title_flow', direction = 'horizontal' }
    title_flow.style.minimal_width = Army_MainWindow.window_width
    title_flow.style.maximal_width = Army_MainWindow.window_width

    local title = title_flow.add { type = 'label', name = 'header-title', caption = { "gui-army.control-title" }, style = 'caption_label' }

    local pusher = title_flow.add { type = "empty-widget", name = "header-pusher", style = "draggable_space_header" }
    pusher.style.width = Army_MainWindow.window_width - 24 - 250
    pusher.style.height = 24
    pusher.drag_target = main_window

    local close_button = title_flow.add { type = "sprite-button",
                                          name = 'erm_army_close_button',
                                          sprite = "utility/close_white",
                                          style = 'frame_action_button',
                                          tooltip = { "gui-army.close-button" }
    }
    close_button.style.width = 24
    close_button.style.height = 24
    close_button.style.horizontal_align = 'right'

    local tabbed_pane = main_window.add { type = "tabbed-pane", name = 'main-tab' }
    local tab1 = tabbed_pane.add { type = "tab", caption = "Army Stats", name = 'army-stats-tab' }
    local tab2 = tabbed_pane.add { type = "tab", caption = "Deployers", name = 'deployer-tab' }
    local tab3 = tabbed_pane.add { type = "tab", caption = "Command Center", name = 'command-center-tab' }
    local tab4 = tabbed_pane.add { type = "tab", caption = "Help", name = 'help-tab' }

    local army_stats_pane = tabbed_pane.add { type = "flow", name = UnitTab.name, direction = 'vertical' }
    army_stats_pane.style.margin = 5
    army_stats_pane.style.width = Army_MainWindow.window_width - 40

    local deployer_pane = tabbed_pane.add { type = "flow", name = DeployerTab.name, direction = 'vertical' }
    deployer_pane.style.margin = 5
    deployer_pane.style.width = Army_MainWindow.window_width - 40

    local command_center_pane = tabbed_pane.add { type = "flow", name = CCTab.name, direction = 'vertical' }
    command_center_pane.style.margin = 5
    command_center_pane.style.width = Army_MainWindow.window_width - 40

    local help_pane = tabbed_pane.add { type = "scroll-pane", name = HelpTab.name, direction = 'vertical' }
    help_pane.style.margin = 5
    help_pane.style.width = Army_MainWindow.window_width - 40

    tabbed_pane.add_tab(tab1, army_stats_pane)
    tabbed_pane.add_tab(tab2, deployer_pane)
    tabbed_pane.add_tab(tab3, command_center_pane)
    tabbed_pane.add_tab(tab4, help_pane)
end

function Army_MainWindow.hide(player)
    if player.gui.screen[SharedTabFunctions.root_name] then
        player.gui.screen[SharedTabFunctions.root_name].destroy()
    end
end

function Army_MainWindow.update(player, tab_id)
    if Army_MainWindow.is_showing(player) then
        update_tabs[Army_MainWindow.tab_names[tab_id]](player)
    end
end

function Army_MainWindow.update_army_stats()
    for k, player in pairs(game.players) do
        local main_tab = SharedTabFunctions.get_main_tab(player)
        if player and main_tab and main_tab.selected_tab_index == 1 then
            Army_MainWindow.update(player, 1)
        end
    end
end

function Army_MainWindow.update_deployers()
    for k, player in pairs(game.players) do
        local main_tab = SharedTabFunctions.get_main_tab(player)
        if player and main_tab and main_tab.selected_tab_index == 2 then
            Army_MainWindow.update(player, 2)
        end
    end
end

function Army_MainWindow.update_command_centers()
    for k, player in pairs(game.players) do
        local main_tab = SharedTabFunctions.get_main_tab(player)
        if player and main_tab and main_tab.selected_tab_index == 3 then
            Army_MainWindow.update(player, 3)
        end
    end
end

function Army_MainWindow.open_tab(player, tab_name)
    if Army_MainWindow.is_hidden(player) then
        Army_MainWindow.show(player)
    end

    if player and player.valid then
        local player_data = SharedTabFunctions.get_player_tab_data(player)
        local main_tab = SharedTabFunctions.get_main_tab(player)
        if Army_MainWindow.tab_ids[tab_name] then
            player_data.active_tab_id = Army_MainWindow.tab_ids[tab_name]
            main_tab.selected_tab_index = player_data.active_tab_id
            update_tabs[tab_name](player)
        else
            local active_tab_name = Army_MainWindow.tab_names[player_data.active_tab_id]
            main_tab.selected_tab_index = player_data.active_tab_id
            update_tabs[active_tab_name](player)
        end
    end
end

function Army_MainWindow.is_hidden(player)
    return player.gui.screen[SharedTabFunctions.root_name] == nil
end

function Army_MainWindow.is_showing(player)
    return not Army_MainWindow.is_hidden(player)
end

function Army_MainWindow.toggle_main_window(owner)
    if owner then
        local button_flow = mod_gui.get_button_flow(owner)

        if button_flow.erm_army_control_toggle == nil then
            return
        end

        if Army_MainWindow.is_hidden(owner) then
            button_flow.erm_army_control_toggle.tooltip = { 'gui-army.show-control' }
            Army_MainWindow.open_tab(owner)
        else
            button_flow.erm_army_control_toggle.tooltip = { 'gui-army.hide-control' }
            Army_MainWindow.hide(owner)
        end
    end
end

function Army_MainWindow.toggle_close(owner)
    if owner then
        local button_flow = mod_gui.get_button_flow(owner)
        button_flow.erm_army_control_toggle.tooltip = { 'gui-army.show-control' }
        Army_MainWindow.hide(owner)
    end
end

function Army_MainWindow.update_overhead_button(player_index)
    local owner = game.players[player_index]
    local button_flow = mod_gui.get_button_flow(owner)

    if owner and button_flow and not button_flow['erm_army_control_toggle'] then
        if game.item_prototypes['erm_terran/command-center'] then
            button_flow.add { type = "sprite-button", name = "erm_army_control_toggle", tooltip = { 'gui-army.show-control' }, sprite = 'item/erm_terran/command-center' }
        else
            button_flow.add { type = "sprite-button", name = "erm_army_control_toggle", tooltip = { 'gui-army.show-control' }, sprite = 'item/submachine-gun' }
        end
    end
end

function Army_MainWindow.set_selected_cc(player, cc_selector, cc_name)

    if not player and not player.valid then
        return
    end

    local player_data = SharedTabFunctions.get_player_tab_data(player)
    local selected_cc = player_data.selected_cc

    if cc_selector.name == CCTab.cc_from_selector then
        if selected_cc.to == cc_name then
            selected_cc.to = selected_cc.from
            selected_cc.from = cc_name
        else
            selected_cc.from = cc_name
        end
    elseif cc_selector.name == CCTab.cc_to_selector then
        if selected_cc.from == cc_name then
            selected_cc.from = selected_cc.to
            selected_cc.to = cc_name
        else
            selected_cc.to = cc_name
        end
    end

    Army_MainWindow.open_tab(player, 'command-center-pane')
end

function Army_MainWindow.start_link(player)
    local player_data = SharedTabFunctions.get_player_tab_data(player)
    local from_cc = ArmyTeleportationProcessor.getObjectByName(player_data.selected_cc.from)
    local to_cc = ArmyTeleportationProcessor.getObjectByName(player_data.selected_cc.to)
    if from_cc and to_cc then
        ArmyTeleportationProcessor.link(from_cc, to_cc)
        player_data.success_message = { 'gui-army.cc_linked_with', player_data.selected_cc.from, player_data.selected_cc.to }
    else
        player_data.error_message = { 'gui-army.cc_linked_with_error' }
    end
    Army_MainWindow.update_command_centers()
end

function Army_MainWindow.stop_link(player)
    local player_data = SharedTabFunctions.get_player_tab_data(player)
    local force = player.force
    if global.army_entrance_teleporters[force.index] then
        player_data.success_message = { 'gui-army.cc_unlinked_with', player_data.selected_cc.from, player_data.selected_cc.to }
        ArmyTeleportationProcessor.unlink(force)
    else
        player_data.error_message = { 'gui-army.cc_unlinked_with_error' }
    end
    Army_MainWindow.update_command_centers()
end

function Army_MainWindow.deployer_turn_all_on(player)
    local player_data = SharedTabFunctions.get_player_tab_data(player)
    if player_data.filtered_deployers then
        for _, deployer in pairs(player_data.filtered_deployers) do
            if (deployer.build_only == nil or deployer.build_only == false) and deployer.entity.valid then
                ArmyDeploymentProcessor.add_to_active(deployer.entity)
            end
        end
        Army_MainWindow.update_deployers()
    end
end

function Army_MainWindow.deployer_turn_all_off(player)
    local player_data = SharedTabFunctions.get_player_tab_data(player)
    if player_data.filtered_deployers then
        for _, deployer in pairs(player_data.filtered_deployers) do
            local entity = deployer.entity
            if (deployer.build_only == nil or deployer.build_only == false) and entity.valid then
                ArmyDeploymentProcessor.remove_from_active(entity.force.index, entity.unit_number)
            end
        end
        Army_MainWindow.update_deployers()
    end
end

function Army_MainWindow.deployer_turn_on(player, deployer_unit_number)
    local force = player.force
    if global.army_built_deployers[force.index] then
        local deployer = global.army_built_deployers[force.index][tonumber(deployer_unit_number)]
        if deployer and deployer.entity.valid then
            ArmyDeploymentProcessor.add_to_active(deployer.entity)
        end
    end
end

function Army_MainWindow.deployer_turn_off(player, deployer_unit_number)
    local force = player.force
    ArmyDeploymentProcessor.remove_from_active(force.index, tonumber(deployer_unit_number))
end

function Army_MainWindow.set_build_only(player, unit_number, build_only)
    local force = player.force
    ArmyDeploymentProcessor.set_build_only(force.index, unit_number, build_only)
end

function Army_MainWindow.update_army_planner(player, element)
    if player and player.valid and element and element.valid then
        local unit_count = math.abs(tonumber(element.text))
        local force = player.force
        local name = string.gsub(element.name, 'army_deployer/planner/', '')
        if ArmyPopulationProcessor.set_auto_deploy_unit_count(player, force, name, unit_count) then
            Army_MainWindow.update_army_stats()
        end
    end
end

return Army_MainWindow
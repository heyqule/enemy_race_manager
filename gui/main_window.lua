---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 11/5/2022 11:16 AM
---

local mod_gui = require('mod-gui')
local String = require('__stdlib__/stdlib/utils/string')

local GlobalConfig = require('__enemyracemanager__/lib/global_config')
local LevelManager = require('__enemyracemanager__/lib/level_processor')
local ReplacementProcessor = require('__enemyracemanager__/lib/replacement_processor')
local SurfaceProcessor = require('__enemyracemanager__/lib/surface_processor')
local ForceHelper = require('__enemyracemanager__/lib/helper/force_helper')

---- Main Window
local ERM_MainWindow = {
    require_update_all = false,
    root_name = 'erm_races_manager',
    window_width = 680,
    window_height = 400,
}


--- Main Windows functions
function ERM_MainWindow.show(player)
    local gui = player.gui.screen
    if gui[ERM_MainWindow.root_name] then
        return
    end
    local main_window = gui.add {
        type = "frame",
        name = ERM_MainWindow.root_name,
        direction = "vertical",
    }
    main_window.force_auto_center()
    player.opened = main_window

    local admin = player.admin
    main_window.style.maximal_width = ERM_MainWindow.window_width
    main_window.style.minimal_width = ERM_MainWindow.window_width
    main_window.style.maximal_height = ERM_MainWindow.window_height * 2
    main_window.style.minimal_height = ERM_MainWindow.window_height
    -- Race Manager Title
    local title_flow = main_window.add { type = 'flow', name = 'title_flow', direction = 'horizontal' }
    title_flow.style.minimal_width = ERM_MainWindow.window_width
    title_flow.style.maximal_width = ERM_MainWindow.window_width

    local title = title_flow.add { type = 'label', name = 'title', caption = { "gui.title" }, style = 'caption_label' }

    local pusher = title_flow.add{type = "empty-widget", style = "draggable_space_header"}
    pusher.style.width = ERM_MainWindow.window_width - 24 - 160
    pusher.style.height = 24
    pusher.drag_target = main_window

    local close_button = title_flow.add { type = "sprite-button",
                                          name = 'erm_close_button',
                                          sprite = "utility/close_white",
                                          style = 'frame_action_button',
                                          tooltip = {"gui.close-instruction"}
    }
    close_button.style.width = 24
    close_button.style.height = 24
    close_button.style.horizontal_align = 'right'

    local scroll = main_window.add { type = "scroll-pane", style = "scroll_pane_in_shallow_frame" }
    scroll.style.margin = 5
    main_window.style.minimal_height = ERM_MainWindow.window_height / 1.25

    scroll.add { type = 'label', name = 'surface_name', caption = { 'gui.current_planet',  player.surface.name } , style = 'caption_label' }
    if GlobalConfig.mapgen_is_one_race_per_surface() and global.enemy_surfaces[player.surface.name] then
        scroll.add { type = 'label', name = 'surface_race_name', caption = { 'gui.mapgen_1_race',  global.enemy_surfaces[player.surface.name] } }
    elseif GlobalConfig.mapgen_is_2_races_split() then
        scroll.add { type = 'label', name = 'surface_race_name', caption = { 'gui.mapgen_2_races', GlobalConfig.positive_axis_race(), GlobalConfig.negative_axis_race()} }
    else
        scroll.add { type = 'label', name = 'surface_race_name', caption = { 'gui.mapgen_mixed_races'} }
    end

    local item_table = scroll.add { type = "table", column_count = 7, style = "bordered_table" }
    item_table.style.horizontally_stretchable = false

    item_table.add { type = "label", caption = { 'gui.race_column' } }
    item_table.add { type = "label", caption = { 'gui.level_column' } }
    item_table.add { type = "label", caption = { 'gui.tier_column' } }
    item_table.add { type = "label", caption = { 'gui.evolution_column' } }
    item_table.add { type = "label", caption = { 'gui.evolution_factor_column' } }
    item_table.add { type = "label", caption = { 'gui.attack_column' } }
    item_table.add { type = "label", caption = { 'gui.action_column' } }

    LevelManager.calculateEvolutionPoints(global.race_settings, game.forces, settings)

    for name, race_setting in pairs(global.race_settings) do
        item_table.add { type = "label", caption = race_setting.race }
        item_table.add { type = "label", caption = race_setting.level }
        item_table.add { type = "label", caption = race_setting.tier }
        item_table.add { type = "label", caption = string.format("%.4f", race_setting.evolution_point) }
        item_table.add { type = "label", caption = string.format("%.4f", LevelManager.getEvolutionFactor(name)) }
        item_table.add { type = "label", caption = race_setting.attack_meter .. '/' .. race_setting.next_attack_threshold }
        local action_flow = item_table.add { type = "flow", name = name .. "_flow", direction = 'vertical' }
        action_flow.add { type = "button", name = race_setting.race .. "/more_action", caption = { 'gui.more_action' }, tooltip = { 'gui.more_action_tooltip' } }
    end

    if admin then
        local bottom_flow = main_window.add { type = "flow", direction = 'horizontal' }
        bottom_flow.add { type = "button", name = "erm_reset_default_bitter", caption = { 'gui.reset_biter' }, tooltip = { 'gui.reset_biter_tooltip' }, style = 'red_button' }
        local button_pusher = bottom_flow.add{type = "empty-widget", style = "draggable_space_header"}
        button_pusher.style.width = 150
        button_pusher.style.height = 24
        bottom_flow.add { type = "button", name = "erm_clean_idle_biter", caption = { 'gui.clean_idle_biter' }, tooltip = { 'gui.clean_idle_biter_tooltip' }, style = 'red_button' }
        local button_pusher_2 = bottom_flow.add{type = "empty-widget", style = "draggable_space_header"}
        button_pusher_2.style.width = 100
        button_pusher_2.style.height = 24
        bottom_flow.add { type = "button", name = "erm_nuke_biters", caption = { 'gui.nuke_biters' }, tooltip = { 'gui.nuke_biters_tooltip' }, style = 'red_button' }
    end
end

function ERM_MainWindow.hide(player)
    if player.gui.screen[ERM_MainWindow.root_name] then
        player.gui.screen[ERM_MainWindow.root_name].destroy()
    end
end

function ERM_MainWindow.update(player)
    if ERM_MainWindow.is_showing(player) then
        ERM_MainWindow.hide(player)
        ERM_MainWindow.show(player)
    end
end

function ERM_MainWindow.update_all()
    for k, player in pairs(game.players) do
        if player then
            ERM_MainWindow.update(player)
        end
    end
end

function ERM_MainWindow.is_hidden(player)
    return player.gui.screen[ERM_MainWindow.root_name] == nil
end

function ERM_MainWindow.is_showing(player)
    return not ERM_MainWindow.is_hidden(player)
end

function ERM_MainWindow.toggle_main_window(owner)
    if owner then
        local button_flow = mod_gui.get_button_flow(owner)

        if ERM_MainWindow.is_hidden(owner) then
            button_flow.erm_toggle.tooltip = { 'gui.hide-enemy-stats' }
            ERM_MainWindow.show(owner)
        else
            button_flow.erm_toggle.tooltip = { 'gui.show-enemy-stats' }
            ERM_MainWindow.hide(owner)
        end
    end
end

function ERM_MainWindow.toggle_close(owner)
    if owner then
        local button_flow = mod_gui.get_button_flow(owner)
        button_flow.erm_toggle.tooltip = { 'gui.show-enemy-stats' }
        ERM_MainWindow.hide(owner)
    end
end

function ERM_MainWindow.reset_default(event)
    local profiler = game.create_profiler()
    for _, surface in pairs(game.surfaces) do
        ReplacementProcessor.resetDefault(surface, global.race_settings, 'enemy')
        ERM_MainWindow.update_all()
    end
    profiler.stop()
    game.print({ '', 'Reset enemies to default: ', profiler })
end

function ERM_MainWindow.kill_idle_units(event)
    SurfaceProcessor.wander_unit_clean_up()
end


function ERM_MainWindow.nuke_biters(event)
    local owner = game.players[event.element.player_index]
    local surface = owner.surface
    local pp = owner.position
    local units = surface.find_entities_filtered({force=ForceHelper.get_all_enemy_forces(), radius=32, position=pp, type='unit'})
    for _, entity in pairs(units) do
        entity.destroy()
    end
end

function ERM_MainWindow.update_overhead_button(player_index)
    local owner = game.players[player_index]
    local button_flow = mod_gui.get_button_flow(owner)

    if owner and button_flow and not button_flow['erm_toggle'] then
        button_flow.add { type = "sprite-button", name = "erm_toggle", tooltip = { 'gui.show-enemy-stats' }, sprite = 'utility/force_editor_icon' }
    end
end

return ERM_MainWindow
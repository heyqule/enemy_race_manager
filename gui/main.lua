---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 1/2/2021 4:48 PM
---
local mod_gui = require('mod-gui')
local String = require('__stdlib__/stdlib/utils/string')

local GlobalConfig = require('__enemyracemanager__/lib/global_config')
local LevelManager = require('__enemyracemanager__/lib/level_processor')
local ReplacementProcessor = require('__enemyracemanager__/lib/replacement_processor')
local SurfaceProcessor = require('__enemyracemanager__/lib/surface_processor')

--- GuiSharedFunctions
local element_valid = function(event)
   return event.element and event.element.valid
end

--- Detail Windows
local ERM_DetailWindow = {
    root_name = 'erm_races_manager_detail',
    window_width = 680,
    levelup_silder_name = 'levelup_silder',
    levelup_value_name = 'levelup_value',
    confirm_name = 'setting_confirm',
}

---- Main Window
local ERM_MainWindow = {
    require_update_all = false,
    root_name = 'erm_races_manager',
    window_width = 680,
    window_height = 400,
}


--- Detail Windows functions
function ERM_DetailWindow.show(player, race_setting)
    local gui = player.gui.screen
    local detail_window = gui.add {
        type = "frame",
        name = ERM_DetailWindow.root_name,
        direction = "vertical",
    }
    detail_window.force_auto_center()
    ERM_DetailWindow.parent_window = player.opened
    player.opened = detail_window

    local admin = player.admin
    -- Race Manager Title
    local title_flow = detail_window.add { type = 'flow', name = 'title_flow', direction = 'horizontal' }
    title_flow.style.minimal_width = ERM_DetailWindow.window_width

    local title = title_flow.add { type = 'label', name = 'title', caption = { "gui.detail_title", race_setting.race }, style = 'caption_label' }

    local pusher = title_flow.add{type = "empty-widget", style = "draggable_space_header"}
    pusher.style.width = ERM_DetailWindow.window_width - 24 - 175
    pusher.style.height = 24
    pusher.drag_target = detail_window

    local close_button = title_flow.add { type = "sprite-button",
                                          name = 'erm_detail_close_button',
                                          sprite = "utility/close_white",
                                          style = 'frame_action_button',
                                          tooltip = {"gui.back-instruction"}
    }
    close_button.style.width = 24
    close_button.style.height = 24
    close_button.style.horizontal_align = 'right'

    local main_flow = detail_window.add { type = 'flow', direction = "horizontal"}
    local left_flow = main_flow.add { type = 'flow', direction = "vertical"}
    left_flow.style.width = ERM_DetailWindow.window_width / 2

    local item_table = left_flow.add { type = "table", column_count = 2, style = "bordered_table" }
    item_table.style.horizontally_stretchable = true

    item_table.add { type = "label", caption = { 'gui.race_column' } }
    item_table.add { type = "label", caption = race_setting.race }

    item_table.add { type = "label", caption = { 'gui.level_column' } }
    item_table.add { type = "label", caption = race_setting.level }

    item_table.add { type = "label", caption = { 'gui.tier_column' } }
    item_table.add { type = "label", caption = race_setting.tier }

    item_table.add { type = "label", caption = { 'gui.evolution_column' } }
    item_table.add { type = "label", caption = string.format("%.4f", race_setting.evolution_point) }

    item_table.add { type = "label", caption = { 'gui.evolution_factor_column' } }
    item_table.add { type = "label", caption = string.format("%.4f", LevelManager.getEvolutionFactor(race_setting.race)) }

    item_table.add { type = "label", caption = { 'gui.attack_column' } }
    item_table.add { type = "label", caption = race_setting.attack_meter .. '/' .. race_setting.next_attack_threshold }

    local unit_killed_count = race_setting.unit_killed_count or 0
    item_table.add { type = "label", caption = { 'gui.total_unit_killed' } }
    item_table.add { type = "label", caption = unit_killed_count }

    local structure_killed_count = race_setting.structure_killed_count or 0
    item_table.add { type = "label", caption = { 'gui.total_structures_killed' } }
    item_table.add { type = "label", caption = structure_killed_count }

    if admin then
        local right_flow = main_flow.add { type = 'flow', direction = "vertical"}
        right_flow.style.width = ERM_DetailWindow.window_width / 2

        local setting_flow = right_flow.add { type = "flow", name = "setting_flow", direction = 'vertical' }
        local level_slider_flow = setting_flow.add {type = "flow", name = "level_slider_flow", direction = 'horizontal'}
        level_slider_flow.add { type = "label",
                                caption = { 'gui.level_up_silder'},
                                tooltip = { 'gui.level_up_silder_tooltip' }
        }
        local level_slider = level_slider_flow.add { type = "slider",
                                                     name = race_setting.race .. "/" .. ERM_DetailWindow.levelup_silder_name,
                                                     tooltip = { 'gui.level_up_silder_tooltip' },
                                                     minimum_value = LevelManager.get_calculated_current_level(race_setting),
                                                     maximum_value = GlobalConfig.get_max_level(),
                                                     style = 'notched_slider'
        }
        level_slider.slider_value = race_setting.level
        level_slider.style.vertical_align = "bottom"
        level_slider_flow.add { type = "label", name = race_setting.race .. "/" .. ERM_DetailWindow.levelup_value_name, caption = race_setting.level }

        local gap = setting_flow.add {type="empty-widget"}
        gap.style.height = 4
        setting_flow.add {type = "button", name = race_setting.race .. "/" .. ERM_DetailWindow.confirm_name, caption = {"gui.confirm"}, style="confirm_button"}

        local center_gap = right_flow.add {type="empty-widget"}
        center_gap.style.height = 32

        local action_flow = right_flow.add { type = "flow", name = "action_flow", direction = 'vertical' }
        local pass_new_race = race_setting.race ~= MOD_NAME
        local pass_biter_race = race_setting.race == MOD_NAME and settings.startup['enemyracemanager-enable-bitters'].value == true
        if pass_new_race or pass_biter_race then
            action_flow.add { type = "button", name = race_setting.race .. "/replace_enemy", caption = { 'gui.replace_enemy' }, tooltip = { 'gui.replace_enemy_tooltip' } }
        end
    end
end

function ERM_DetailWindow.update_slider_text(event)
    if element_valid(event) then
        local nameToken = String.split(event.element.name, '/')
        if nameToken[2] == ERM_DetailWindow.levelup_silder_name then
            local name = nameToken[1]..'/'..ERM_DetailWindow.levelup_value_name
            event.element.parent[name].caption = event.element.slider_value
        end
    end
end

function ERM_DetailWindow.confirm(event)
    if element_valid(event) then
        local nameToken = String.split(event.element.name, '/')
        if nameToken[2] == ERM_DetailWindow.confirm_name then
            local slider_name = nameToken[1]..'/'..ERM_DetailWindow.levelup_silder_name
            log(event.element.parent['level_slider_flow'][slider_name])
            local level = tonumber(event.element.parent['level_slider_flow'][slider_name].slider_value)
            log(level .. '//' .. global.race_settings[nameToken[1]].level)
            if level ~= global.race_settings[nameToken[1]].level then
                LevelManager.levelByCommand(global.race_settings, nameToken[1], level)
                ERM_MainWindow.require_update_all = true

                local owner = game.players[event.element.player_index]
                ERM_DetailWindow.hide(owner)
            end
        end
    end
end

function ERM_DetailWindow.replace_enemy(event)
    if element_valid(event) then
        if String.find(event.element.name, "/replace_enemy", 1, true) then
            local nameToken = String.split(event.element.name, '/')
            if (game.forces['enemy_' .. nameToken[1]] or nameToken[1] == MOD_NAME) and global.race_settings[nameToken[1]] then
                local owner = game.players[event.element.player_index]
                SurfaceProcessor.assign_race(owner.surface, nameToken[1])
                ReplacementProcessor.rebuild_map(owner.surface, global.race_settings, nameToken[1])
                ERM_MainWindow.require_update_all = true
            end
        end
    end
end

function ERM_DetailWindow.hide(player)
    player.gui.screen[ERM_DetailWindow.root_name].destroy()
    ERM_MainWindow.show(player)
end

function ERM_DetailWindow.toggle_close(event)
    if element_valid(event) then
        local owner = game.players[event.element.player_index]
        if owner and event.element.name == "erm_detail_close_button" then
            ERM_DetailWindow.hide(owner)
        end
    end
end

--- Main Windows functions
function ERM_MainWindow.show(player)
    local gui = player.gui.screen
    if gui[ERM_MainWindow.root_name] then
        return
    end
    local main_window = gui.add {
        type = "frame",
        name = ERM_MainWindow.root_name,
        direction = "vertical",
    }
    main_window.force_auto_center()
    player.opened = main_window

    local admin = player.admin
    main_window.style.maximal_width = ERM_MainWindow.window_width
    main_window.style.minimal_width = ERM_MainWindow.window_width
    main_window.style.maximal_height = ERM_MainWindow.window_height * 2
    main_window.style.minimal_height = ERM_MainWindow.window_height
    -- Race Manager Title
    local title_flow = main_window.add { type = 'flow', name = 'title_flow', direction = 'horizontal' }
    title_flow.style.minimal_width = ERM_MainWindow.window_width
    title_flow.style.maximal_width = ERM_MainWindow.window_width

    local title = title_flow.add { type = 'label', name = 'title', caption = { "gui.title" }, style = 'caption_label' }

    local pusher = title_flow.add{type = "empty-widget", style = "draggable_space_header"}
    pusher.style.width = ERM_MainWindow.window_width - 24 - 160
    pusher.style.height = 24
    pusher.drag_target = main_window

    local close_button = title_flow.add { type = "sprite-button",
                                          name = 'erm_close_button',
                                          sprite = "utility/close_white",
                                          style = 'frame_action_button',
                                          tooltip = {"gui.close-instruction"}
    }
    close_button.style.width = 24
    close_button.style.height = 24
    close_button.style.horizontal_align = 'right'

    local scroll = main_window.add { type = "scroll-pane", style = "scroll_pane_in_shallow_frame" }
    scroll.style.margin = 5
    main_window.style.minimal_height = ERM_MainWindow.window_height / 1.25

    scroll.add { type = 'label', name = 'surface_name', caption = { 'gui.current_planet',  player.surface.name } , style = 'caption_label' }
    if GlobalConfig.mapgen_is_one_race_per_surface() and global.enemy_surfaces[player.surface.name] then
        scroll.add { type = 'label', name = 'surface_race_name', caption = { 'gui.mapgen_1_race',  global.enemy_surfaces[player.surface.name] } }
    elseif GlobalConfig.mapgen_is_2_races_split() then
        scroll.add { type = 'label', name = 'surface_race_name', caption = { 'gui.mapgen_2_races', GlobalConfig.positive_axis_race(), GlobalConfig.negative_axis_race()} }
    else
        scroll.add { type = 'label', name = 'surface_race_name', caption = { 'gui.mapgen_mixed_races'} }
    end

    local item_table = scroll.add { type = "table", column_count = 7, style = "bordered_table" }
    item_table.style.horizontally_stretchable = false

    item_table.add { type = "label", caption = { 'gui.race_column' } }
    item_table.add { type = "label", caption = { 'gui.level_column' } }
    item_table.add { type = "label", caption = { 'gui.tier_column' } }
    item_table.add { type = "label", caption = { 'gui.evolution_column' } }
    item_table.add { type = "label", caption = { 'gui.evolution_factor_column' } }
    item_table.add { type = "label", caption = { 'gui.attack_column' } }
    item_table.add { type = "label", caption = { 'gui.action_column' } }

    LevelManager.calculateEvolutionPoints(global.race_settings, game.forces, settings)

    for name, race_setting in pairs(global.race_settings) do
        item_table.add { type = "label", caption = race_setting.race }
        item_table.add { type = "label", caption = race_setting.level }
        item_table.add { type = "label", caption = race_setting.tier }
        item_table.add { type = "label", caption = string.format("%.4f", race_setting.evolution_point) }
        item_table.add { type = "label", caption = string.format("%.4f", LevelManager.getEvolutionFactor(name)) }
        item_table.add { type = "label", caption = race_setting.attack_meter .. '/' .. race_setting.next_attack_threshold }
        local action_flow = item_table.add { type = "flow", name = name .. "_flow", direction = 'vertical' }
        action_flow.add { type = "button", name = race_setting.race .. "/more_action", caption = { 'gui.more_action' }, tooltip = { 'gui.more_action_tooltip' } }
    end

    if admin then
        local bottom_flow = main_window.add { type = "flow", direction = 'horizontal' }
        bottom_flow.add { type = "button", name = "emr_reset_default_bitter", caption = { 'gui.reset_biter' }, tooltip = { 'gui.reset_biter_tooltip' }, style = 'red_button' }
    end
end

function ERM_MainWindow.hide(player)
    if player.gui.screen[ERM_MainWindow.root_name] then
        player.gui.screen[ERM_MainWindow.root_name].destroy()
    end
end

function ERM_MainWindow.update(player)
    if ERM_MainWindow.is_showing(player) then
        ERM_MainWindow.hide(player)
        ERM_MainWindow.show(player)
    end
end

function ERM_MainWindow.update_all()
    for k, player in pairs(game.players) do
        if player then
            ERM_MainWindow.update(player)
        end
    end
end

function ERM_MainWindow.is_hidden(player)
    return player.gui.screen[ERM_MainWindow.root_name] == nil
end

function ERM_MainWindow.is_showing(player)
    return not ERM_MainWindow.is_hidden(player)
end

function ERM_MainWindow.toggle_main_window(event)
    if element_valid(event) then
        local owner = game.players[event.element.player_index]
        if owner and event.element.name == "erm_toggle" then
            local button_flow = mod_gui.get_button_flow(owner)

            if ERM_MainWindow.is_hidden(owner) then
                button_flow.erm_toggle.tooltip = { 'gui.hide-enemy-stats' }
                ERM_MainWindow.show(owner)
            else
                button_flow.erm_toggle.tooltip = { 'gui.show-enemy-stats' }
                ERM_MainWindow.hide(owner)
            end
        end
    end
end

function ERM_MainWindow.toggle_close(event)
    if element_valid(event) then
        local owner = game.players[event.element.player_index]
        if owner and event.element.name == "erm_close_button" then
            local button_flow = mod_gui.get_button_flow(owner)
            button_flow.erm_toggle.tooltip = { 'gui.show-enemy-stats' }
            ERM_MainWindow.hide(owner)
        end
    end
end

function ERM_MainWindow.open_detail_window(event)
    if element_valid(event) then
        local owner = game.players[event.element.player_index]
        if owner and String.find(event.element.name, "/more_action", 1, true) then
            nameToken = String.split(event.element.name, '/')
            ERM_DetailWindow.show(owner, global.race_settings[nameToken[1]])
        end
    end
end

function ERM_MainWindow.reset_default(event)
    if element_valid(event) then
        if event.element.name == "emr_reset_default_bitter" then
            for _, surface in pairs(game.surfaces) do
                ReplacementProcessor.resetDefault(surface, global.race_settings, 'enemy')
                ERM_MainWindow.require_update_all = true;
            end
        end
    end
end

function ERM_MainWindow.update_overhead_button(player_index)
    local owner = game.players[player_index]
    local button_flow = mod_gui.get_button_flow(owner)

    if owner and button_flow and not button_flow['erm_toggle'] then
        button_flow.add { type = "sprite-button", name = "erm_toggle", tooltip = { 'gui.show-enemy-stats' }, sprite = 'utility/force_editor_icon' }
    end
end

local ERM_GUI = {
    main_window = ERM_MainWindow,
    detail_window = ERM_DetailWindow
}

return ERM_GUI
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 11/5/2022 11:12 AM
---

local SurfaceProcessor = require("__enemyracemanager__/lib/surface_processor")
local RaceSettingsHelper = require("__enemyracemanager__/lib/helper/race_settings_helper")
local ForceHelper = require("__enemyracemanager__/lib/helper/force_helper")

--- Nuke Planet upgrade dialog
local NukePlanetDialog = {
    root_name = "erm_races_manager_nuke_planet_dialog",
    window_width = 340
}

function NukePlanetDialog.show(player)
    if player.permission_group and not player.permission_group.allows_action(defines.input_action.deconstruct) then
        return
    end
    
    local gui = player.gui.screen
    if gui[NukePlanetDialog.root_name] then
        return
    end
    local dialog = gui.add {
        type = "frame",
        name = NukePlanetDialog.root_name,
        direction = "vertical",
    }
    dialog.force_auto_center()
    NukePlanetDialog.parent_window = player.opened
    player.opened = dialog

    local title_flow = dialog.add { type = "flow", name = "title_flow", direction = "horizontal" }
    title_flow.style.minimal_width = NukePlanetDialog.window_width

    local title = title_flow.add { type = "label", name = "title", caption = { "gui.nuke_planet_title", player.surface.name }, style = "caption_label" }

    local main_flow = dialog.add { type = "flow", direction = "vertical" }
    local description = main_flow.add { type = "label", name = "description", caption = { "gui.nuke_planet_description" } }

    local center_gap = main_flow.add { type = "empty-widget" }
    center_gap.style.height = 16

    local bottom_flow = main_flow.add { type = "flow", direction = "horizontal" }
    bottom_flow.add { type = "button", name = player.index.."/nuke_planet_cancel", tags={filter_pattern=".*/nuke_planet_cancel"}, caption = { "gui.nuke_planet_cancel" }, style = "red_button" }

    local button_pusher = bottom_flow.add { type = "empty-widget", style = "draggable_space_header" }
    button_pusher.style.height = 24
    button_pusher.style.horizontally_stretchable = true

    bottom_flow.add { type = "button", name = player.index.."/nuke_planet_confirm", tags={filter_pattern=".*/nuke_planet_confirm"}, caption = { "gui.nuke_planet_confirm" }, style = "green_button" }
end

function NukePlanetDialog.hide(player)
    if player.gui.screen[NukePlanetDialog.root_name] then
        player.gui.screen[NukePlanetDialog.root_name].destroy()
    end
end

--- Spawn a nuke and nuke all enemy entities 320 tiles
function NukePlanetDialog.confirm(player)
    local death_loop_data = storage.death_loop_detection[player.index]
    if player.gui.screen[NukePlanetDialog.root_name] then
        player.gui.screen[NukePlanetDialog.root_name].destroy()
    end
    if death_loop_data.surface_index then
        local nuke_area = {{-384,-384},{384,384}}
        local surface = game.surfaces[death_loop_data.surface_index]
        if surface and surface.valid then
            local spawn_location = player.force.get_spawn_position(surface)
            surface.create_entity {
                name = "atomic-rocket",
                target = spawn_location,
                position = { x = spawn_location.x , y = spawn_location.y - 10 },
                direction = defines.direction.south,
                force = "neutral",
                speed = 3,
            }
            local entities = surface.find_entities_filtered{
                type={"unit", "turret", "unit-spawner", "segmented-unit", "spider-unit"},
                area=nuke_area,
                force=ForceHelper.get_enemy_forces(),
            }
            for _, entity in pairs(entities) do
                if entity.valid then
                    entity.die("neutral")
                end
            end
            local enemy_names = SurfaceProcessor.get_all_enemies_on(surface.name)
            if enemy_names then
                for _, name in pairs(enemy_names) do
                    RaceSettingsHelper.set_attack_meter(name, 0)
                end
            end
            storage.death_loop_detection[player.index] = nil
            player.force.print({"gui.nuke_delivery", player.name, surface.name})
            return
        end
    end
    
    player.print({"gui.unable_to_deliver"})
end

return NukePlanetDialog
---
--- This test case requires ERM_ZERG
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 1/7/2024 6:10 PM
---

local TestShared = require("shared")
local AttackGroupBeaconProcessor = require("__enemyracemanager__/lib/attack_group_beacon_processor")
local AttackGroupProcessor = require("__enemyracemanager__/lib/attack_group_processor")
local ForceHelper = require("__enemyracemanager__/lib/helper/force_helper")
local QualityProcessor = require('lib/quality_processor')

before_each(function()
    TestShared.prepare_the_factory()
    storage.erm_unit_groups = {}
end)

after_each(function()
    TestShared.reset_the_factory()
    storage.erm_unit_groups = {}
end)

local command_center = "enemy_erm_zerg--hive--5"
local ultralisk = "enemy_erm_zerg--ultralisk--5"
local force_name = "enemy_erm_zerg"
local race_name = "enemy_erm_zerg"
local PLAYER = "player"
local SCOUT_NAME_PATTERN = "_scout--"

local function spawn_cc(surface)
    local position = {x=0,y=320}
    surface.request_to_generate_chunks({ position.x/32, position.y/32}, 2)
    surface.force_generate_chunk_requests()
    storage.skip_quality_rolling = true
    return surface.create_entity({name=command_center,force=force_name,position=position})
end

local function spawn_regular_unit_group(surface, position, is_auto)
    local group = surface.create_unit_group {position = position, force = "enemy"}
    for i = 0, 50, 1 do
        local entity = surface.create_entity({
            name = "enemy--small-biter--1",
            position = position
        })
        group.add_member(entity)
    end
    if is_auto then
        group.set_autonomous()
    end
    return group
end

--- Regular attack group Test
    it("Regular Group by AP", function()
        async(5400)
        local surface = game.surfaces[1]
        local entity = spawn_cc(surface)
        local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { 0, 0 } })
        AttackGroupBeaconProcessor.init_index()

        storage.race_settings[race_name].attack_meter = 3500
        storage.race_settings[race_name].next_attack_threshold = 3000
        after_ticks(5400, function()
            assert(table_size(storage.erm_unit_groups) == 1,"Check Erm unit group table")

            local key = next(storage.erm_unit_groups)
            assert.not_nil(storage.erm_unit_groups[key], "Check Unit Group Data")

            local group = storage.erm_unit_groups[key].group
            assert.truthy(storage.erm_unit_groups[key].group.valid, "Check Unit Group valid")
            done()
        end)
    end)
    --- Elite group Test
    it("Elite Group by AAP", function()
        async(5400)
        local surface = game.surfaces[1]
        local entity = spawn_cc(surface)
        local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { -10, -10 } })
        AttackGroupBeaconProcessor.init_index()

        storage.erm_unit_groups = {}
        storage.race_settings[race_name].attack_meter = 3500
        storage.race_settings[race_name].next_attack_threshold = 3000
        storage.race_settings[race_name].attack_meter_total = 2000000
        QualityProcessor.calculate_quality_points()


        after_ticks(5400, function()
            assert(table_size(storage.erm_unit_groups) == 1,"Check Erm unit group table")

            local key = next(storage.erm_unit_groups)
            assert.not_nil(storage.erm_unit_groups[key], "Check Group Record")

            local group = storage.erm_unit_groups[key].group
            assert.truthy(storage.erm_unit_groups[key].group.valid, "Check Unit Group valid")

            local has_epic_member = false
            for _, member in pairs(group.members) do
                local name_token = ForceHelper.get_name_token(member.name)
                if tonumber(name_token[3]) == 4 then
                    has_epic_member = true
                    break
                end
            end
            assert.equal(has_epic_member, true, "Check Group Level")
            done()
        end)
    end)

    it("Superweapon revenge", function()
        async(3600)
        local surface = game.surfaces[1]
        local entity = spawn_cc(surface)
        local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { -20, -20 } })
        AttackGroupBeaconProcessor.init_index()

        local laser_turret = surface.create_entity({
            name="laser-turret",
            position= { 0, 0},
            force=PLAYER
        })

        for i = 1, 50, 1 do
            surface.create_entity({
                name = ultralisk,
                force= force_name,
                position = { entity.position.x+16, entity.position.y}
            })
        end

        after_ticks(300, function()
            surface.create_entity({
                type = "projectile",
                name = "atomic-rocket",
                force = PLAYER,
                target = entity,
                position = laser_turret.position,
                source = laser_turret,
                speed = 0.5
            })
        end)

        after_ticks(3600, function()
            assert(table_size(storage.erm_unit_groups) == 1,"Check Erm unit group table")

            local key = next(storage.erm_unit_groups)
            assert.not_nil(storage.erm_unit_groups[key], "Check Group Record")
            done()
        end)
    end)

    it("Flyers", function()
        async(3600)
        local surface = game.surfaces[1]
        local entity = spawn_cc(surface)
        local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { -10, -10 } })
        AttackGroupBeaconProcessor.init_index()
        AttackGroupProcessor.generate_group(
                game.forces[force_name],
                20,
                {group_type = AttackGroupProcessor.GROUP_TYPE_FLYING}
        )

        after_ticks(3600, function()
            local entities = surface.find_entities_filtered({
                area = {{-100,-100},{100,100}},
                type = "unit",
                force = force_name
            })

            local correct = 0
            for _, entity in pairs(entities) do
                if string.find(entity.name, "mutalisk", 1, true) or string.find(entity.name, "scout", 1, true) then
                    correct = correct + 1
                end
            end
            assert(correct > 0,"Has correct unit in the area")
            assert.equal(table_size(entities), correct,"Correct Unit Names")
            done()
        end)
    end)

    it("Dropships", function()
        async(7200)

        local surface = game.surfaces[1]
        local entity = spawn_cc(surface)
        local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { -20, -20 } })
        AttackGroupBeaconProcessor.init_index()
        AttackGroupProcessor.generate_group(
                game.forces[force_name],
                20,
                {
                    group_type =AttackGroupProcessor.GROUP_TYPE_DROPSHIP
                }
        )

        after_ticks(7200, function()
            local entities = surface.find_entities_filtered({
                area = {{-100,-100},{100,100}},
                type = "unit",
                force = force_name
            })

            local correct = 0
            for _, entity in pairs(entities) do
                if string.find(entity.name, "overlord", 1, true) or string.find(entity.name, "scout", 1, true) then
                    correct = correct + 1
                end
            end
            assert(correct > 0,"Has correct unit in the area")
            done()
        end)
    end)

    it("Featured Group", function()
        async(3600)

        local surface = game.surfaces[1]
        local entity = spawn_cc(surface)
        local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { -20, -20 } })
        AttackGroupBeaconProcessor.init_index()
        AttackGroupProcessor.generate_group(
                game.forces[force_name],
                20,
                {group_type = AttackGroupProcessor.GROUP_TYPE_FEATURED,
                featured_group_id = 1}
        )

        after_ticks(3600, function()
            local entities = surface.find_entities_filtered({
                area = {{-100,-100},{100,100}},
                type = "unit",
                force = force_name
            })

            local correct = 0
            for _, entity in pairs(entities) do
                if string.find(entity.name, "zergling", 1, true) or
                    string.find(entity.name, "ultralisk", 1, true) or
                    string.find(entity.name, "scout", 1, true)
                then
                    correct = correct + 1
                end
            end
            assert.equal(table_size(entities), correct,"Correct Unit Names")
            done()
        end)
    end)

    it("Featured Flyer Group", function()
        async(5400)

        local surface = game.surfaces[1]
        local entity = spawn_cc(surface)
        local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { -20, -20 } })
        AttackGroupBeaconProcessor.init_index()
        AttackGroupProcessor.generate_group(
                game.forces[force_name],
                20,
                {group_type = AttackGroupProcessor.GROUP_TYPE_FEATURED_FLYING,
                 featured_group_id = 2}
        )

        after_ticks(5400, function()
            local entities = surface.find_entities_filtered({
                area = {{-100,-100},{100,100}},
                type = "unit",
                force = force_name
            })

            local correct = 0
            for _, entity in pairs(entities) do
                if string.find(entity.name, "devourer", 1, true) or
                    string.find(entity.name, "guardian", 1, true) or
                    string.find(entity.name, "scout", 1, true)
                then
                    correct = correct + 1
                end
            end
            assert(table_size(entities), correct,"Correct Unit Names")
            done()
        end)
    end)

    it("Group Killed during generation", function()
        async(1900)

        local surface = game.surfaces[1]
        local entity = spawn_cc(surface)
        local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { -20, -20 } })
        AttackGroupBeaconProcessor.init_index()
        AttackGroupProcessor.generate_group(
                game.forces[force_name],
                200
        )
        after_ticks(600, function()
            local group = storage.group_tracker.enemy_erm_zerg.group
            group.destroy()
        end)
        after_ticks(1800, function()
            assert.equal(storage.group_tracker.enemy_erm_zerg, nil, "Remove record from group tracker")
            done()
        end)
    end)

    it("Autonomous Group should have an scout", function()
        local surface = game.surfaces[1]
        local entity = spawn_cc(surface)
        local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { -20, -20 } })
        AttackGroupBeaconProcessor.init_index()

        local group = spawn_regular_unit_group(surface, entity.position, true)
        assert.not_nil(storage.scout_unit_name[group.unique_id],"Scout name in cache")
        group.start_moving()

        local has_scout = false
        for _, unit in pairs(group.members) do
            if string.find(unit.name, SCOUT_NAME_PATTERN) ~= nil then
                has_scout = true
                break;
            end
        end
        assert.equal(has_scout, true, "Scout is in the team")
        assert.is_nil(storage.scout_unit_name[group.unique_id],"Scout name cache removed")
    end)

    it("Non-ERM Manual group should NOT have a scout", function()
        local surface = game.surfaces[1]
        local entity = spawn_cc(surface)
        local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { -20, -20 } })
        AttackGroupBeaconProcessor.init_index()

        local group = spawn_regular_unit_group(surface, entity.position, false)
        assert.not_nil(storage.scout_unit_name[group.unique_id],"Scout name in cache")
        group.start_moving()

        local has_scout = false
        for _, unit in pairs(group.members) do
            if string.find(unit.name, SCOUT_NAME_PATTERN) ~= nil then
                has_scout = true
                break;
            end
        end
        assert.equal(has_scout, false, "Scout is not in the team")
        assert.is_nil(storage.scout_unit_name[group.unique_id],"Scout name cache removed")
    end)

    it("Empty unit group should not include in ERM group tracker", function()
        local surface = game.surfaces[1]
        local entity = spawn_cc(surface)
        local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { -20, -20 } })
        AttackGroupBeaconProcessor.init_index()
        local group = surface.create_unit_group {position = entity.position, force = "enemy"}
        assert.not_nil(storage.scout_unit_name[group.unique_id],"Scout name in cache")
        group.start_moving()
        assert.is_nil(storage.scout_unit_name[group.unique_id],"Scout name cache removed")
    end)

it("Enemy victory expansion", function()
    async(7200)
    local surface = game.surfaces[1]
    local entity = spawn_cc(surface)
    AttackGroupBeaconProcessor.init_index()
    AttackGroupProcessor.generate_group(
            game.forces[force_name],
            20,
            {group_type = AttackGroupProcessor.GROUP_TYPE_FLYING}
    )

    after_ticks(7200, function()
        local entities = surface.find_entities_filtered({
            area = {{-100,-100},{100,100}},
            type = "unit",
            force = force_name
        })

        local entities = surface.find_entities_filtered({
            area = {{-100,-100},{100,100}},
            type = "unit-spawner",
            force = force_name
        })
        assert(table_size(entities) > 0,"Has victory expansion")
        done()
    end)
end)

it("process_attack_position on an unit should be kill after one minute", function()
    async(7210)
    local surface = game.surfaces[1]
    local entity = spawn_cc(surface)
    AttackGroupBeaconProcessor.init_index()
    local entity = surface.create_entity {name = 'enemy_erm_zerg--zergling--1', position={10,10}}
    local entity = surface.create_entity {name = 'enemy_erm_zerg--zergling--2', position={10,10}}

    after_ticks(7200, function()
        local entities = surface.find_entities_filtered({
            area = {{-100,-100},{100,100}},
            type = "unit",
            force = force_name
        })

        local correct = table_size(entities)
        assert(correct == 0,"It should be killed")

        done()
    end)
end)
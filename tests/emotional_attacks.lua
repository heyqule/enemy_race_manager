---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 9/7/2025 12:24 AM
---
local TestShared = require("shared")
local EmotionConstants = require('__enemyracemanager__/lib/emotion_constants')
local EmotionProcessor = require("__enemyracemanager__/lib/emotion_processor")
local AttackGroupBeaconConstants = require("__enemyracemanager__/lib/attack_group_beacon_constants")
local AttackGroupBeaconProcessor = require("__enemyracemanager__/lib/attack_group_beacon_processor")

before_each(function()
    TestShared.prepare_the_factory()
end)

after_each(function()
    TestShared.reset_the_factory()
end)

local zerg_force = 'enemy_erm_zerg'

it("Emotional Attack - EMO_RAPID_EXPAND", function()
    async(3600)
    local surface = game.surfaces[1]
    local force = game.forces[zerg_force]
    surface.request_to_generate_chunks({ 0, 0 }, 8)
    surface.force_generate_chunk_requests()
    TestShared.create_iron_ore_batch(surface, {x=-100, y=-100}, 10, 1000)
    TestShared.create_iron_ore_batch(surface, {x=100, y=-100}, 10, 1000)
    TestShared.create_iron_ore_batch(surface, {x=-100, y=100}, 10, 1000)
    TestShared.create_iron_ore_batch(surface, {x=100, y=100}, 10, 1000)
    surface.create_entity({name=zerg_force..'--hive--1',position={x=200,y=200}, force=zerg_force})
    surface.create_entity({name=zerg_force..'--hive--1',position={x=210,y=210}, force=zerg_force})
    local entity = surface.create_entity({name=zerg_force..'--hive--1',position={x=220,y=220}, force=zerg_force})
    AttackGroupBeaconProcessor.create_spawn_beacon(entity)

    EmotionProcessor.switch({
        surface = surface,
        force = force,
        current_emo = EmotionConstants.EMO_RAPID_EXPAND,
        cooldown = 15 * minute
    })
    --- 1 is near existing hive. 3 expandable
    assert.equal(3, #storage.emotion[zerg_force].buildable_beacons, "Fetched all beacons")

    local last_tick = game.tick
    after_ticks(900, function()
        EmotionProcessor.run(force.name)
        assert(last_tick < storage.emotion[zerg_force].last_run, "Try 1 Ran successfully...")
        last_tick = storage.emotion[zerg_force].last_run
    end)

    after_ticks(3600, function()
        assert(2, #storage.emotion[zerg_force].buildable_beacons, "2 remaining expanable beacons")
        local beacons = surface.find_entities_filtered({
            name = {AttackGroupBeaconConstants.RESOURCE_BEACON},
            force = 'neutral',
        })
        assert.equal(4, #beacons, "4 beacons found")
        local base_beacons = 0
        for _, beacon in pairs(beacons) do
            local count = surface.count_entities_filtered({
                force = force.name,
                type = 'unit',
                limit = 1,
                position = beacon.position,
                radius = AttackGroupBeaconConstants.SPAWNER_BEACON_RADIUS,
            })
            if count > 0 then
                base_beacons = base_beacons + 1
            end
        end
        assert(base_beacons >= 2, "Base beacon count must be >= 2")
        done()
    end)
end)

it("Emotional Attack - EMO_SIEGE", function()
    async(4500)
    local surface = game.surfaces[1]
    local force = game.forces[zerg_force]
    surface.request_to_generate_chunks({ 0, 0 }, 12)
    surface.force_generate_chunk_requests()

    local entity = surface.create_entity({name=zerg_force..'--hive--1',position={x=220,y=220}, force=zerg_force})
    local entity = surface.create_entity({name=zerg_force..'--hive--1',position={x=210,y=220}, force=zerg_force})
    local entity = surface.create_entity({name=zerg_force..'--hive--1',position={x=230,y=220}, force=zerg_force})
    AttackGroupBeaconProcessor.create_spawn_beacon(entity)

    local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { 0, 0 } })
    AttackGroupBeaconProcessor.create_attack_entity_beacon(rocket_launcher)

    EmotionProcessor.switch({
        surface = surface,
        force = force,
        current_emo = EmotionConstants.EMO_SIEGE,
        builder_name = storage.race_settings[zerg_force].builder,
        cooldown = 10 * minute,
    })

    local last_tick = game.tick

    after_ticks(1800, function()
        EmotionProcessor.run(force.name)
        assert(last_tick < storage.emotion[zerg_force].last_run, "Try 1 Ran successfully...")
        last_tick = storage.emotion[zerg_force].last_run
    end)

    after_ticks(4500, function()
        local unit_count = surface.count_entities_filtered({
            type = 'unit',
            force = zerg_force,
            position = rocket_launcher.position,
            radius = 64
        })
        local building_count = surface.count_entities_filtered({
            type = { 'turret', 'unit-spawn' },
            force = zerg_force,
            position = rocket_launcher.position,
            radius = 64
        })
        assert(unit_count > 2, "unit_count OK...")
        assert(building_count > 2, "building_count OK...")
        done()
    end)
end)

it("Emotional Attack - EMO_DOUBLE_TAP", function()
    async(10800)
    local surface = game.surfaces[1]
    local force = game.forces[zerg_force]
    surface.request_to_generate_chunks({ 0, 0 }, 20)
    surface.force_generate_chunk_requests()

    local close_entity = surface.create_entity({name=zerg_force..'--hive--1',position={x=220,y=220}, force=zerg_force})
    local close_entity = surface.create_entity({name=zerg_force..'--hive--1',position={x=210,y=220}, force=zerg_force})
    local close_entity = surface.create_entity({name=zerg_force..'--hive--1',position={x=230,y=220}, force=zerg_force})
    AttackGroupBeaconProcessor.create_spawn_beacon(close_entity)
    local builder_name = force.name..'--zergling--1'
    for i = 0, 100, 1 do
        local new_spawn_position = surface.find_non_colliding_position(builder_name, close_entity.position, 16, 2)
        local entity = surface.create_entity({
            name = builder_name,
            position = new_spawn_position,
            force = force,
        })
    end

    local far_entity = surface.create_entity({name=zerg_force..'--hive--1',position={x=350,y=350}, force=zerg_force})
    local far_entity = surface.create_entity({name=zerg_force..'--hive--1',position={x=370,y=350}, force=zerg_force})
    local far_entity = surface.create_entity({name=zerg_force..'--hive--1',position={x=390,y=350}, force=zerg_force})
    AttackGroupBeaconProcessor.create_spawn_beacon(far_entity)
    for i = 0, 100, 1 do
        local new_spawn_position = surface.find_non_colliding_position(builder_name, far_entity.position, 16, 2)
        local entity = surface.create_entity({
            name = builder_name,
            position = new_spawn_position,
            force = force
        })
    end


    local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { 0, 0 } })
    AttackGroupBeaconProcessor.create_attack_entity_beacon(rocket_launcher)

    EmotionProcessor.switch({
        surface = surface,
        force = force,
        current_emo = EmotionConstants.EMO_DOUBLE_TAP,
        cooldown = 3 * minute,
    })

    local last_tick = game.tick
    after_ticks(300, function()
        EmotionProcessor.run(force.name)
        assert(last_tick < storage.emotion[zerg_force].last_run, "Try EmotionProcessor.Run successfully...")
        last_tick = storage.emotion[zerg_force].last_run
    end)

    after_ticks(10800, function()
        assert(last_tick < storage.emotion[zerg_force].last_run, "Try Double Tap successfully...")
        last_tick = storage.emotion[zerg_force].last_run
        local unit_count = surface.count_entities_filtered({
            type = 'unit',
            force = zerg_force,
            position = rocket_launcher.position,
            radius = 64
        })
        assert(unit_count > 120, "unit_count OK... ("..unit_count..")")
        done()
    end)
end)

it("Emotional Attack - EMO_RUSH", function()
    async(10800)
    local surface = game.surfaces[1]
    local force = game.forces[zerg_force]
    surface.request_to_generate_chunks({ 0, 0 }, 20)
    surface.force_generate_chunk_requests()

    local close_entity = surface.create_entity({name=zerg_force..'--hive--1',position={x=220,y=220}, force=zerg_force})
    local close_entity = surface.create_entity({name=zerg_force..'--hive--1',position={x=210,y=220}, force=zerg_force})
    local close_entity = surface.create_entity({name=zerg_force..'--hive--1',position={x=230,y=220}, force=zerg_force})
    AttackGroupBeaconProcessor.create_spawn_beacon(close_entity)
    local rocket_launcher = surface.create_entity({ name = "erm-rocket-silo-test", force = "player", position = { 0, 0 } })
    AttackGroupBeaconProcessor.create_attack_entity_beacon(rocket_launcher)

    EmotionProcessor.switch({
        surface = surface,
        force = force,
        cooldown = 15 * second,
        current_emo = EmotionConstants.EMO_DOUBLE_TAP
    })

    local last_tick = game.tick
    after_ticks(1900, function()
        EmotionProcessor.run(force.name)
        assert(last_tick < storage.emotion[zerg_force].last_run, "Try EmotionProcessor.Run successfully...")
        last_tick = storage.emotion[zerg_force].last_run
    end)

    local last_count = 0
    after_ticks(3800, function()
        assert(last_tick < storage.emotion[zerg_force].last_run, "Try 2 successfully...")
        last_tick = storage.emotion[zerg_force].last_run
        local unit_count = surface.count_entities_filtered({
            type = 'unit',
            force = zerg_force,
            position = rocket_launcher.position,
            radius = 64
        })
        assert(unit_count > last_count, "unit_count OK R1... ("..unit_count..")")
    end)

    after_ticks(10800, function()
        assert(last_tick < storage.emotion[zerg_force].last_run, "Try 3 successfully...")
        last_tick = storage.emotion[zerg_force].last_run
        local unit_count = surface.count_entities_filtered({
            type = 'unit',
            force = zerg_force,
            position = rocket_launcher.position,
            radius = 64
        })
        assert(unit_count > last_count, "unit_count R2... ("..unit_count..")")
        done()
    end)

end) 
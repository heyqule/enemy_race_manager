---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 5/8/2024 12:32 AM
---


local TestShared = require('shared')
local AttackGroupHeatProcessor = require('__enemyracemanager__/lib/attack_group_heat_processor')
local AttackGroupBeaconProcessor = require('__enemyracemanager__/lib/attack_group_beacon_processor')
local AttackGroupProcessor = require('__enemyracemanager__/lib/attack_group_processor')

local reset_scout_global = function()
    global.scout_tracker = {}
    global.scout_scanner = false
end

before_each(function()
    TestShared.prepare_the_factory()
end)

after_each(function()
    TestShared.reset_the_factory()
    TestShared.reset_surfaces()
    TestShared.reset_forces()
    AttackGroupHeatProcessor.reset_globals()
    reset_scout_global()
end)

local race_name = 'erm_vanilla'
local player = 'player'
local enemy = 'enemy'
local biter_spawner = 'erm_vanilla/biter-spawner/1'

describe("Scouts", function()
    it("Spawn Scout", function()
        async(900)

        local surface = game.surfaces[1]
        local entity = surface.create_entity({name=biter_spawner, force=enemy, position={200, 0}})
        AttackGroupBeaconProcessor.init_index()

        local scout = AttackGroupProcessor.spawn_scout(race_name, game.forces[enemy], game.surfaces[1], game.forces[player])
        after_ticks(600, function()
            local scout = AttackGroupProcessor.spawn_scout(race_name, game.forces[enemy], game.surfaces[1], game.forces[player])
            local scout = AttackGroupProcessor.spawn_scout(race_name, game.forces[enemy], game.surfaces[1], game.forces[player])
        end)

        after_ticks(900, function()
            assert(scout.valid == true, 'Scout spawned')
            local player_beacon = AttackGroupBeaconProcessor.get_attackable_spawn_beacon(surface, game.forces[player])
            local count = surface.count_entities_filtered({
                name = {
                    AttackGroupBeaconProcessor.get_scout_name(race_name, AttackGroupBeaconProcessor.LAND_SCOUT),
                    AttackGroupBeaconProcessor.get_scout_name(race_name, AttackGroupBeaconProcessor.AERIAL_SCOUT)
                },
                force = game.forces[enemy],
                position = player_beacon.position,
                radius = 32
            })
            assert(count == 1, 'Scout is near attack beacon')


            local count = surface.count_entities_filtered({
                name = {
                    AttackGroupBeaconProcessor.get_scout_name(race_name, AttackGroupBeaconProcessor.LAND_SCOUT),
                    AttackGroupBeaconProcessor.get_scout_name(race_name, AttackGroupBeaconProcessor.AERIAL_SCOUT)
                },
            })
            assert(count == 1, 'It should not spawn additional scout, while one is active')

            done()
        end)
    end)

    it("Scout Scanning: buildings", function()
        async(4200)
        local surface = game.surfaces[1]
        local entity = surface.create_entity({name=biter_spawner, force=enemy, position={200, 200}})

        AttackGroupBeaconProcessor.init_index()

        local resource = surface.create_entity({ name = 'iron-ore', amount=10000, position = { -200, -200 } })
        local mining_drill = surface.create_entity({ name = 'electric-mining-drill', force = 'player', amount=10000, position = { -200, -200 } })
        local rocket_launcher = surface.create_entity({ name = 'rocket-silo', force = 'player', position = { 200, 0 } })
        local gun_turret = surface.create_entity({ name = 'gun-turret', force = 'player', position = { 200, 100 } })
        local furnace = surface.create_entity({ name = 'electric-furnace', force = 'player', position = { 200, -200 } })
        local lab = surface.create_entity({ name = 'lab', force = 'player', position = { 0, -200 } })
        local aturret = surface.create_entity({ name = 'artillery-turret', force = 'player', position = { 0, -200 } })

        local scout = AttackGroupProcessor.spawn_scout(race_name, game.forces[enemy], game.surfaces[1], game.forces[player])

        local command_chain = TestShared.get_command_chain()
        table.insert(command_chain.commands, {
            type = defines.command.go_to_location,
            destination = {x=200,y=-200},
            radius = 8,
            distraction = defines.distraction.none
        })
        table.insert(command_chain.commands, {
            type = defines.command.go_to_location,
            destination = {x=-200,y=-200},
            radius = 8,
            distraction = defines.distraction.none
        })
        scout.set_command(command_chain)

        after_ticks(4200, function()
            local count = surface.count_entities_filtered({
                name=AttackGroupBeaconProcessor.ATTACK_ENTITIES_BEACON
            })
            assert(count > 1, 'Saw '..count..' enemy buildings. Assume pass if final count is between 2 to 5')
            done()
        end)
    end)

    it("Detour to a resource node, then go to final_destination", function()
        local surface = game.surfaces[1]

        local spawner = surface.create_entity({name=biter_spawner, force=enemy, position={200, 200}})

        local entity = surface.create_entity({ name = 'crude-oil', position = { 75, 150 } })
        local oil_drill = surface.create_entity({ name = 'pumpjack', force = 'player', amount=10000, position = { 75, 150 } })

        local entity = surface.create_entity({ name = 'crude-oil', position = { 150, 150 } })
        local oil_drill = surface.create_entity({ name = 'pumpjack', force = 'player', amount=10000, position = { 150, 150 } })

        local entity = surface.create_entity({ name = 'crude-oil', position = { 75, 90 } })
        local oil_drill = surface.create_entity({ name = 'pumpjack', force = 'player', amount=10000, position = { 75, 90 } })

        local entity = surface.create_entity({ name = 'crude-oil', position = { 150, 90 } })
        local oil_drill = surface.create_entity({ name = 'pumpjack', force = 'player', amount=10000, position = { 150, 90 } })
        AttackGroupBeaconProcessor.init_index()

        local scout = AttackGroupProcessor.spawn_scout(race_name, game.forces[enemy], game.surfaces[1], game.forces[player])
        after_ticks(2500, function()
            local scout_count = surface.count_entities_filtered({
                name={AttackGroupBeaconProcessor.get_scout_name(MOD_NAME, AttackGroupBeaconProcessor.LAND_SCOUT)},
                position={0,0},
                radius=32,
            })
            local corpse_count = surface.count_entities_filtered({
                type="corpse",
                position={0,0},
                radius=32,
            })
            assert(scout_count == 1 or corpse_count == 1, 'Must see a scout or a corpse near final destination.')
            local count = surface.count_entities_filtered({
                name=AttackGroupBeaconProcessor.ATTACK_ENTITIES_BEACON
            })
            assert(count >= 2, 'See '..count..' attack beacons. Expect at least 2.')
            done()
        end)
    end)


    it("Spawn beacon data is still in the data tree while spawn beacon is invalid", function()
        AttackGroupBeaconProcessor.init_index()
        local surface = game.surfaces[1]
        local enemy = game.forces['enemy']

        local control_key = 5
        global['cdata'][surface.index][enemy.name]['ssk'] = control_key

        global['erm_spawn_beacon'][surface.index] = {}
        global['erm_spawn_beacon'][surface.index][enemy.name] = {}
        for i = 1, 10, 1 do
            local entity = surface.create_entity({name = "erm_spawn_beacon", position={i*5,i*5}})
            global['erm_spawn_beacon'][surface.index][enemy.name][i] = { beacon = entity }
        end

        local entity = surface.create_entity({ name = 'erm_vanilla/biter-spawner/1', position = { 50,50 } })

        global['erm_spawn_beacon'][surface.index][enemy.name][6].beacon.destroy()

        after_ticks(30, function()
            AttackGroupProcessor.spawn_scout(race_name, game.forces['enemy'], surface, game.forces['player'])
        end)

        after_ticks(60, function()
            -- it should not crash
            done()
        end)
    end)
end)
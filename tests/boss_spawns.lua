---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 7/6/2025 3:55 PM
---

if not ENABLE_BOSS_TESTS then
    return
end

local TestShared = require("shared")
local BossProcessor = require("__enemyracemanager__/lib/boss_processor")

local place_zerg_radar = function(surface, position)
    local radar = surface.create_entity({
        name = "enemy_erm_zerg--psi-radar",
        position = {
            position.x + 5,
            position.y + 5,
        },
        force = 'player'
    })
    surface.create_entity({
        name = "substation",
        position = {
            position.x + 10,
            position.y + 10,
        },
        force = 'player'
    })
    surface.create_entity({
        name = "electric-energy-interface",
        position = {
            position.x + 10,
            position.y + 10,
        },
        force = 'player'
    })
    
    return radar
end

before_each(function()
    TestShared.prepare_the_factory()
    storage.boss = nil
    BossProcessor.init_globals()
end)

after_each(function()
    TestShared.reset_the_factory()
end)

local enemy_name = 'enemy_erm_zerg'
local hive_name = 'enemy_erm_zerg--boss_overmind--'
local nyduspit_name = 'enemy_erm_zerg--boss_nyduspit--'

for tier = 1, 5, 1 do
    it("Test Boss Spawns Quality, Tier "..tier, function()
        async(900)
        local surface = game.planets.char.create_surface()
        local player = game.players[1]
        player.teleport({-30,0},'char')
        --player.chart(surface, {{x = -192, y = -192}, {x = 192, y = 192}})
        surface.request_to_generate_chunks({ 0, 0 }, 8)
        surface.force_generate_chunk_requests()
        storage.race_settings[enemy_name].boss_tier = tier
        local radar = place_zerg_radar(surface, {x=10,y=10})
        BossProcessor.exec(radar, {x=100,y=100})
        local full_hive_name = hive_name..tier
        local full_nyduspit_name = nyduspit_name..tier

        after_ticks(900, function()
            assert.not_nil(storage.boss.spawn_beacons, "Have Boss spawn beacons")
            assert.not_nil(storage.boss.entity, "Boss spawned")
            local position = storage.boss.entity_position
            local hive = surface.find_entities_filtered({position = position, radius = 64, name = full_hive_name})
            local nyduspit = surface.find_entities_filtered({position = position, radius = 64, name = full_nyduspit_name})
            local units = surface.find_entities_filtered({position = position, radius = 64, type = 'unit', limit = 1})
            assert(hive[1], "Boss hive presents")
            assert(nyduspit[1], "Boss nyduspit presents")
            assert(units[1], "Boss hive presents")
            game.print(hive[1].health)
            game.print(nyduspit[1].health)
            if (tier > 1) then
                assert(hive[1].quality.name == BossProcessor.get_boss_quality(), "Boss hive quality match")
                assert(nyduspit[1].quality.name == BossProcessor.get_boss_quality(), "Boss nyduspit quality match")
                assert(units[1].quality.name == BossProcessor.get_boss_quality(), "Boss unit quality match")
            end
            done()
        end)
    end) 
end


it("Test Boss Spawn Data", function()
    async(900)
    local surface = game.planets.char.create_surface()
    surface.request_to_generate_chunks({ 0, 0 }, 8)
    surface.force_generate_chunk_requests()
    game.players[1].teleport({10,0},'char')
    place_zerg_radar(surface, {x=10,y=10})
    BossProcessor.exec(radar, {x=100,y=100})
    after_ticks(900, function()
        assert.not_nil(storage.boss.spawn_beacons, "Boss spawn beacons tracked")
        assert.not_nil(storage.boss.entity, "Boss entity spawned tracked")
        assert.not_nil(storage.boss.boss_tier, "Boss tier tracked")
        local position = storage.boss.entity_position
        assert(position.x > 0 or position.y > 0, "Boss placement correct")
        done()
    end)
end)
 
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 7/23/2025 10:38 PM
---

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 7/6/2025 3:55 PM
---

if not ENABLE_BOSS_TESTS then
    return
end

local TestShared = require("shared")
local BossProcessor = require("__enemyracemanager__/lib/boss_processor")


local enemy_name = 'enemy_erm_zerg'
local hive_name = 'enemy_erm_zerg--boss_overmind--'
local nyduspit_name = 'enemy_erm_zerg--boss_nyduspit--'

local place_zerg_radar = function(surface, position)
    local radar = surface.create_entity({
        name = "enemy_erm_zerg--psi-radar",
        position = {
            position.x + 5,
            position.y + 5,
        },
        force = 'player'
    })
    surface.create_entity({
        name = "substation",
        position = {
            position.x + 10,
            position.y + 10,
        },
        force = 'player'
    })
    surface.create_entity({
        name = "electric-energy-interface",
        position = {
            position.x + 10,
            position.y + 10,
        },
        force = 'player'
    })

    return radar
end

before_each(function()
    TestShared.prepare_the_factory()
    storage.boss = nil
    BossProcessor.init_globals()
end)

after_each(function()
    TestShared.reset_the_factory()
end)


it("When boss assisted spawner dies, boss HP get deducted", function()
    async(60)
    local surface = game.planets.char.create_surface()
    surface.request_to_generate_chunks({ 0, 0 }, 8)
    surface.force_generate_chunk_requests()
    game.players[1].teleport({10,0},'char')
    local radar = place_zerg_radar(surface, {x=10,y=10})
    BossProcessor.exec(radar, {x=100,y=100})
    local spawner_max_health = 0
    local total_spawners_checkpoint = 0
    after_ticks(30, function()
        total_spawners_checkpoint = storage.boss.total_assisted_spawners
        local idx, spawner = next(storage.boss.assisted_spawners)
        spawner.entity.health = 1
        spawner_max_health = spawner.entity.max_health
        spawner.entity.damage(99999,  'player', 'physical')
    end)

    after_ticks(60, function()
        assert.not_nil(storage.boss.spawn_beacons, "Boss spawn beacons tracked")
        assert.not_nil(storage.boss.entity, "Boss entity spawned tracked")
        assert.not_nil(storage.boss.boss_tier, "Boss tier tracked")
        assert.equal(total_spawners_checkpoint - 1, storage.boss.total_assisted_spawners, "total assist spawn deducted")
        assert.equal(storage.boss.entity.health, math.floor(storage.boss.entity.max_health - spawner_max_health * 0.33), "Boss health deducted")
        done()
    end)
end)

it("If max assist spawner has not reached, Boss should respawn a new boss assist spawner after 1 minute.", function()
    async(4500) 
    local surface = game.planets.char.create_surface()
    surface.request_to_generate_chunks({ 0, 0 }, 8)
    surface.force_generate_chunk_requests()
    game.players[1].teleport({10,0},'char')
    storage.race_settings[enemy_name].boss_tier = 1
    local radar = place_zerg_radar(surface, {x=10,y=10})
    BossProcessor.exec(radar, {x=100,y=100})
    remote.call("enemyracemanager_debug", "print_global")
    local total_spawners_checkpoint = 0
    local spawner_max_health = 0
    
    -- Wait for initial spawners to spawn
    after_ticks(30, function()
        total_spawners_checkpoint = storage.boss.total_assisted_spawners
        -- Kill one spawner
        local idx, spawner = next(storage.boss.assisted_spawners)
        spawner.entity.health = 1
        spawner_max_health = spawner.entity.max_health
        spawner.entity.damage(99999, 'player', 'physical')
        assert.equal(3, storage.boss.total_assisted_spawners, "One assist spawner killed")
    end)
    
    -- Check after 1 minute (3600 ticks) that a new spawner has been created
    after_ticks(4500, function()
        assert.not_nil(storage.boss.spawn_beacons, "Boss spawn beacons tracked")
        assert.not_nil(storage.boss.entity, "Boss entity spawned tracked")
        assert.not_nil(storage.boss.boss_tier, "Boss tier tracked")
        -- Should have the same number of spawners as before (one died, one respawned)
        assert.equal(total_spawners_checkpoint, storage.boss.total_assisted_spawners, "New assist spawner respawned")
        -- Boss health should be deducted due to spawner death
        assert.equal(storage.boss.entity.health, math.floor(storage.boss.entity.max_health - spawner_max_health * 0.33), "Boss health deducted")
        done()
    end)
end)

it("If existing spawner is under 50% cap, boss spawn 2 assist spawners after a minute of last assist spawner kill.", function()
    async(4500)
    local surface = game.planets.char.create_surface()
    surface.request_to_generate_chunks({ 0, 0 }, 8)
    surface.force_generate_chunk_requests()
    game.players[1].teleport({10,0},'char')
    storage.race_settings[enemy_name].boss_tier = 1
    local radar = place_zerg_radar(surface, {x=10,y=10})
    BossProcessor.exec(radar, {x=100,y=100})
    local total_spawners_checkpoint = 0
    local spawner_max_health = 0

    -- Wait for initial spawners to spawn
    after_ticks(30, function()
        total_spawners_checkpoint = storage.boss.total_assisted_spawners
        -- Kill all spawners
        for idx, spawner in pairs(storage.boss.assisted_spawners) do
            spawner.entity.health = 1
            spawner_max_health = spawner.entity.max_health
            spawner.entity.damage(99999, 'player', 'physical') 
        end
        assert.equal(0, storage.boss.total_assisted_spawners, "All assist spawner killed")
    end)

    -- Check after 1 minute (3600 ticks) that a new spawner has been created
    after_ticks(4500, function()
        assert.not_nil(storage.boss.spawn_beacons, "Boss spawn beacons tracked")
        assert.not_nil(storage.boss.entity, "Boss entity spawned tracked")
        assert.not_nil(storage.boss.boss_tier, "Boss tier tracked")
        -- Should have the same number of spawners as before (one died, one respawned)
        assert.equal(2, storage.boss.total_assisted_spawners, "New assist spawner respawned")
        -- Boss health should be deducted due to spawner death
        assert.equal(storage.boss.entity.health, math.floor(storage.boss.entity.max_health - (spawner_max_health * 0.33 * total_spawners_checkpoint)), "Boss health deducted")
        done()
    end)    
end)
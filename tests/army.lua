---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 1/8/2024 7:09 PM
---

local TestShared = require('shared')
local AttackGroupBeaconProcessor = require('lib/attack_group_beacon_processor')
local ArmyPop = require('lib/army_population_processor')
local ArmyDeployment = require('lib/army_deployment_processor')
local ArmyTeleport = require('lib/army_teleportation_processor')

local function delete_surfaces()
    for _, surface in pairs(game.surfaces) do
        if surface.index ~= 1 then
            game.delete_surface(surface.name)
        end
    end
end

before_each(function()
    TestShared.prepare_the_factory()
    ArmyPop.index()
    delete_surfaces()
end)

after_each(function()
    TestShared.reset_the_factory()
    ArmyPop.index()
    delete_surfaces()
end)

describe("Army Count", function()
    it("Increase / Decrease", function()
        AttackGroupBeaconProcessor.init_index()
        local surface = game.surfaces[1]
        local force = game.forces['player']

        for i = 1, 10, 1 do
            surface.create_entity({
                name='erm_terran/marine/mk1',
                position={0,0},
                force=force,
            })

            surface.create_entity({
                name='erm_terran/battlecruiser/laser',
                position={0,0},
                force=force,
            })

            surface.create_entity({
                name='erm_terran/vulture',
                position={0,0},
                force=force,
            })
        end

        assert(ArmyPop.max_pop(force) == 151, 'POP Count correct')
        assert(ArmyPop.pop_count(force) == 80, 'POP Count correct')
        assert(ArmyPop.unit_count(force) == 30, 'Unit Count correct')

        local vultures = surface.find_entities_filtered({
            name='erm_terran/vulture'
        })

        for _, vulture in pairs(vultures) do
            vulture.die('enemy')
        end

        assert(ArmyPop.pop_count(force) == 60, 'POP Count correct after vulture kill')
        assert(ArmyPop.unit_count(force) == 20, 'Unit Count correct after vulture kill')


        local marines = surface.find_entities_filtered({
            name='erm_terran/marine/mk1'
        })

        for _, marine in pairs(marines) do
            marine.destroy{raise_destroy=true}
        end

        assert(ArmyPop.pop_count(force) == 50, 'Pop count after marine destroy')
        assert(ArmyPop.unit_count(force) == 10, 'Unit count after marine destroy')

        for i = 1, 40, 1 do
            surface.create_entity({
                name='erm_terran/battlecruiser/laser',
                position={0,0},
                force=force
            })
        end

        assert(ArmyPop.pop_count(force) == 150, 'Pop count when pop cap hits')
        assert(ArmyPop.unit_count(force) == 30, 'Unit count when pop cap hits')

    end)
    it('Deployment', function()
        async(1500)
        AttackGroupBeaconProcessor.init_index()
        local surface = game.surfaces[1]
        local force = game.forces['player']
        local unit_name = "erm_terran/marine/mk1"

        local powerinterface = surface.create_entity({
            force=force,
            name='electric-energy-interface',
            position={4,4},
            raise_built = true
        })
        local substation = surface.create_entity({
            force=force,
            name='substation',
            position={3,4},
            raise_built = true
        })
        local entity = surface.create_entity({
            force=force,
            name='erm_terran/barrack',
            position={0,0},
            raise_built = true
        })
        local output_inventory = entity.get_output_inventory()
        entity.set_recipe(unit_name)
        output_inventory.insert({name=unit_name, count=20})

        local deployer = global.army_built_deployers[force.index][tonumber(entity.unit_number)]
        assert.not_nil(deployer,'Deploy Registered')
        if deployer and deployer.entity.valid then
            ArmyDeployment.add_to_active(deployer.entity)
            assert.not_nil(deployer.entity,'Deploy Entity Valid')
        end

        after_ticks(700, function()
            local marines = surface.find_entities_filtered({
                name=unit_name
            })
            assert(table_size(marines) == 1, 'Marine spawned')
            powerinterface.die('enemy')
        end)

        after_ticks(1400, function()
            local marines = surface.find_entities_filtered({
                name=unit_name
            })
            assert(table_size(marines) == 1, 'Marine can not spawned while power is out')
            done()
        end)

    end)
    it('Teleport, same surface', function()
        async(7200)
        AttackGroupBeaconProcessor.init_index()
        local surface = game.surfaces[1]
        local force = game.forces['player']
        local building = "erm_terran/command-center"
        local unit_name = "erm_terran/marine/mk1"

        local powerinterface1 = surface.create_entity({
            force=force,
            name='electric-energy-interface',
            position={-160,4},
            raise_built = true
        })
        local substation1 = surface.create_entity({
            force=force,
            name='substation',
            position={-160,4},
            raise_built = true
        })
        local command_center1 = surface.create_entity({
            force=force,
            name=building,
            position={-160,0},
            raise_built = true
        })

        local powerinterface2 = surface.create_entity({
            force=force,
            name='electric-energy-interface',
            position={160,4},
            raise_built = true
        })
        local substation2 = surface.create_entity({
            force=force,
            name='substation',
            position={160,4},
            raise_built = true
        })
        local command_center2 = surface.create_entity({
            force=force,
            name=building,
            position={160,0},
            raise_built = true
        })

        for i=1,5,1 do
            surface.create_entity({
                force=force,
                name=unit_name,
                position={-160,0}
            })
        end

        ArmyTeleport.link({entity=command_center1} , {entity=command_center2})

        after_ticks(3600, function()
            local marines = surface.find_entities_filtered({
                name=unit_name,
                area={{100,-48}, {200,48}}
            })
            assert(table_size(marines) == 5, 'Units Teleported')

            powerinterface1.die('enemy')
            for i=1,5,1 do
                surface.create_entity({
                    force=force,
                    name=unit_name,
                    position={-160,0}
                })
            end
        end)
        after_ticks(7100, function()
            local marines = surface.find_entities_filtered({
                name=unit_name,
                area={{100,-48}, {200,48}}
            })

            assert(table_size(marines) == 5, 'Units not teleported without power')
            done()
        end)
    end)

    it('Teleport, different surface', function()
        async(7200)
        AttackGroupBeaconProcessor.init_index()
        local surface = game.surfaces[1]
        local surface2 =game.create_surface('test_surface_2')

        local force = game.forces['player']
        local building = "erm_terran/command-center"
        local unit_name = "erm_terran/marine/mk1"

        local powerinterface1 = surface.create_entity({
            force=force,
            name='electric-energy-interface',
            position={0,4},
            raise_built = true
        })
        local substation1 = surface.create_entity({
            force=force,
            name='substation',
            position={0,3},
            raise_built = true
        })
        local command_center1 = surface.create_entity({
            force=force,
            name=building,
            position={0,0},
            raise_built = true
        })

        local powerinterface2 = surface2.create_entity({
            force=force,
            name='electric-energy-interface',
            position={0,4},
            raise_built = true
        })
        local substation2 = surface2.create_entity({
            force=force,
            name='substation',
            position={0,3},
            raise_built = true
        })
        local command_center2 = surface2.create_entity({
            force=force,
            name=building,
            position={0,0},
            raise_built = true
        })

        for i=1,5,1 do
            surface.create_entity({
                force=force,
                name=unit_name,
                position={0,0}
            })
        end

        ArmyTeleport.link({entity=command_center1} , {entity=command_center2})

        after_ticks(3600, function()
            local marines = surface2.find_entities_filtered({
                name=unit_name,
                area={{-48,-48}, {48,48}}
            })
            assert(table_size(marines) == 5, 'Units Teleported')

            powerinterface1.die('enemy')
            for i=1,5,1 do
                surface.create_entity({
                    force=force,
                    name=unit_name,
                    position={0,0}
                })
            end
        end)
        after_ticks(7100, function()
            local marines = surface2.find_entities_filtered({
                name=unit_name,
                area={{-48,-48}, {48,48}}
            })

            assert(table_size(marines) == 5, 'Units not teleported without power')
            done()
        end)
    end)
end)
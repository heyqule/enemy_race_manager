local ForceHelper = require("__enemyracemanager__/lib/helper/force_helper")
local TestShared = require("shared")

before_each(function()
    TestShared.prepare_the_factory()
end)

after_each(function()
    TestShared.reset_the_factory()
end)

describe("Race Setting Data", function()
    it("Checking enemy settings", function()
        local data = remote.call("enemyracemanager", "get_race","enemy")
        -- To be remove
        --assert.equal(data.level, 1, "Enemy Level is 1")
        --assert.equal(data.tier, 1, "Enemy Tier is 1")
        assert.equal(data.race,"enemy","Race Name correct")
        assert.not_nil(data.label,"UI label exist")
        assert.equal(data.attack_meter, 0, "Attack meter is 0")
        assert.equal(data.attack_meter_total, 0, "Attack meter total is 0")
        assert(#data.current_building_tier > 0, "Has items in current_building_tier")
        assert(#data.current_turrets_tier > 0, "Has items in current_turret_tier")
        assert(#data.current_units_tier > 0, "Has items in current_units_tier")
        assert.equal(#data.droppable_units, 3,"Has 3 tier of droppable_units")
        assert.equal(#data.droppable_units[1], 5,"Each droppable_units tier has 5 elements for spawn setting")
        assert.is_string(data.dropship, "dropship assigned to an unit")
        assert.truthy(#data.featured_flying_groups > 0,"has featured_flying_groups")
        assert.equal(#data.featured_flying_groups[1], 5,"has 5 elements for spawn setting")
        assert.truthy(data.featured_flying_groups_total > 0,"featured_groups_total calculated properly")
        assert.truthy(#data.featured_groups > 0,"has featured_groups")
        assert.truthy(#data.featured_groups[1], 5,"has 5 elements for spawn setting")
        assert.truthy(data.featured_groups_total > 0,"featured_groups_total calculated properly")
        assert.truthy(#data.flying_units > 0,"has flying units")
        assert.truthy(#data.units > 0,"has units")
        assert.truthy(#data.turrets > 0,"has turret")
        assert.truthy(#data.support_structures > 0, "has support structure")
        assert.truthy(#data.command_centers > 0, "has support structure")
        assert.near(data.evolution_base_point, 0, 1, "evolution_base_point is 0")
        assert.near(data.evolution_point, 0, 1, "evolution_point is 0")
        assert.not_nil(data.next_attack_threshold,"has next_attack_threshold")
    end)
end)
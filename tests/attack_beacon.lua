---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 12/31/2023 3:22 PM
---

local ForceHelper = require('lib/helper/force_helper')
local AttackGroupBeaconProcessor = require('lib/attack_group_beacon_processor')
local scenarios_helper = require('__enemyracemanager__/scenarios/shared.lua')

local prepare_the_factory = function()
    local surface = game.surfaces[1]
    local player = game.players[1]
    local force = player.force
    local entities = surface.find_entities_filtered({ force = force })
    for _, entity in pairs(entities) do
        entity.destroy()
    end
end

local reset_the_factory = function()
    local surface = game.surfaces[1]

    local forces = {}
    table.insert(forces, ForceHelper.get_enemy_forces())
    table.insert(forces, 'player')
    -- Destroy Player and enemy entities
    for _, force in pairs(forces) do
        local entities = surface.find_entities_filtered({ force = force })
        for _, entity in pairs(entities) do
            entity.destroy()
        end
    end

    -- Destroy Resources
    local resources = surface.find_entities_filtered({ force = 'neutral' })
    for _, entity in pairs(resources) do
        entity.destroy()
    end
end

before_each(function()
    prepare_the_factory()
end)

after_each(function()
    reset_the_factory()
end)

describe("Attack Beacon", function()
    -- you can have many nested describe blocks:
    describe("Create Beacon", function()
        it("Test Land Scout", function()
            local surface = game.surfaces[1]
            local force = game.forces['enemy']
            local player_force = game.forces['player']
            local laser_entity = surface.create_entity({ name = 'laser-turret', force = player_force, position = { 10, 10 } })
            local second_laser_entity = surface.create_entity({ name = 'laser-turret', force = player_force, position = { 15, 15 } })
            local entity = surface.create_entity({ name = 'erm_vanilla/land_scout', force = 'enemy', position = { 12, 12 } })
            entity.die(player_force)
            local land_beacons = surface.find_entities_filtered({ name = 'erm_land_beacon' })
            assert.not_nil(land_beacons, 'Beacon created')
            assert.equal(land_beacons[1].health, 2, 'Beacon health matches')
        end)

        it("Test Aerial Scout", function()
            local surface = game.surfaces[1]
            local force = game.forces['enemy']
            local player_force = game.forces['player']
            local laser_entity = surface.create_entity({ name = 'laser-turret', force = player_force, position = { 10, 10 } })
            local second_laser_entity = surface.create_entity({ name = 'laser-turret', force = player_force, position = { 15, 15 } })
            local entity = surface.create_entity({ name = 'erm_vanilla/aerial_scout', force = 'enemy', position = { 12, 12 } })
            entity.die(player_force)
            local aerial_beacons = surface.find_entities_filtered({ name = 'erm_aerial_beacon' })
            assert.not_nil(aerial_beacons, 'Beacon created')
            assert.equal(aerial_beacons[1].health, 2, 'Beacon health matches')
        end)

        it("Test Attackable Entity Scout", function()
            local surface = game.surfaces[1]
            local force = game.forces['enemy']
            local player_force = game.forces['player']
            local laser_entity = surface.create_entity({ name = 'artillery-turret', force = player_force, position = { 10, 10 } })
            local second_laser_entity = surface.create_entity({ name = 'artillery-turret', force = player_force, position = { 15, 15 } })
            local entity = surface.create_entity({ name = 'erm_vanilla/aerial_scout', force = 'enemy', position = { 12, 12 } })
            entity.die(player_force)
            local aerial_beacons = surface.find_entities_filtered({ name = 'erm_attackable_entity_beacon' })
            assert.not_nil(aerial_beacons, 'Beacon created')
            assert.equal(aerial_beacons[1].health, 2, 'Beacon health matches')
        end)

        it("Test Resource Beacon on Iron Ore", function()
            local surface = game.surfaces[1]

            for x = 25, 40, 1 do
                for y = 20, 50, 1 do
                    surface.create_entity({ name = 'iron-ore', position = { x, y } })
                end
            end
            local iron_ores = surface.count_entities_filtered({ name = 'iron-ore' })
            assert(iron_ores > 10, 'Iron Ore Created')

            AttackGroupBeaconProcessor.create_resource_beacon_from_trunk(surface, { { 25, 20 }, { 65, 70 } })

            local resource_beacon = surface.count_entities_filtered({ name = 'erm_resource_beacon' })
            assert(resource_beacon == 1, 'Resource Beacon Created')
        end)

        it("Test Resource Beacon on Crude Oil", function()
            local surface = game.surfaces[1]
            surface.create_entity({ name = 'crude-oil', position = { 20, 20 } })

            local iron_ores = surface.count_entities_filtered({ name = 'crude-oil' })
            assert(iron_ores == 1, 'Crude Oil Created')

            AttackGroupBeaconProcessor.create_resource_beacon_from_trunk(surface, { { 15, 15 }, { 25, 25 } })
            local resource_beacon = surface.count_entities_filtered({ name = 'erm_resource_beacon' })
            assert(resource_beacon == 1, 'Resource Beacon Created')
        end)

        it("Test Spawner Beacon from trunk", function()
            local surface = game.surfaces[1]
            surface.create_entity({ name = 'erm_vanilla/biter-spawner/1', position = { 20, 20 } })

            local spawner = surface.count_entities_filtered({ type = 'unit-spawner' })
            assert(spawner == 1, 'Spawner Created')

            AttackGroupBeaconProcessor.create_spawn_beacon_from_trunk(surface, { { 15, 15 }, { 25, 25 } })
            local spawner_beacon = surface.count_entities_filtered({ name = 'erm_spawn_beacon' })
            assert(spawner_beacon == 1, 'Spawner Beacon Created')
        end)

        it("Test Attack entity beacon from trunk", function()
            local surface = game.surfaces[1]
            local laser_entity = surface.create_entity({ name = 'artillery-turret', force = 'player', position = { 10, 10 } })
            local rocket_launcher = surface.create_entity({ name = 'rocket-silo', force = 'player', position = { 20, 20 } })

            AttackGroupBeaconProcessor.create_attack_entity_beacon_from_trunk(surface, { { 5, 5 }, { 25, 25 } })
            local attack_beacons = surface.find_entities_filtered({ name = 'erm_attackable_entity_beacon' })
            assert.not_nil(attack_beacons, 'Beacon created')
            assert.equal(attack_beacons[1].health, 2, 'Beacon health matches')
        end)

    end)
    describe("Surface and Forces", function()

        it("Test surface create/clear/delete", function()
            local surface_name = 'TestSurface2'
            local surface = game.create_surface(surface_name)
            local surface_index = surface.index
            assert(#game.surfaces == 2, 'Surface Number Match')

            surface.request_to_generate_chunks({ 0, 0 }, 5)
            surface.force_generate_chunk_requests()

            local control_data = AttackGroupBeaconProcessor.get_control_data(surface.index)
            assert.equal('table', type(control_data), 'Valid Surface Control Data')
            assert.equal('table', type(control_data['enemy']), 'Valid Surface Force Control Data')

            local beacon_data = AttackGroupBeaconProcessor.get_beacon_data(AttackGroupBeaconProcessor.RESOURCE_BEACON, surface.index)
            assert.equal('table', type(beacon_data), 'Valid Beacon Data')

            surface.clear()

            control_data = AttackGroupBeaconProcessor.get_control_data(surface.index)
            assert.equal('table', type(control_data), 'Valid Surface Control Data')
            assert.equal('table', type(control_data['enemy']), 'Valid Surface Force Control Data')

            beacon_data = AttackGroupBeaconProcessor.get_beacon_data(AttackGroupBeaconProcessor.RESOURCE_BEACON, surface.index)
            assert.equal('table', type(beacon_data), 'Valid Beacon Data')

            game.delete_surface(surface_name)
            after_ticks(60, function()
                control_data = AttackGroupBeaconProcessor.get_control_data(surface_index)
                assert.equal(nil, control_data, 'Surface data is nil')

                beacon_data = AttackGroupBeaconProcessor.get_beacon_data(AttackGroupBeaconProcessor.RESOURCE_BEACON, surface_index)
                assert.equal(nil, beacon_data, 'Valid Beacon Data')

            end)
        end)

        it("Test add force and delete", function()
            local force_name = 'enemy_101';
            local force = game.create_force(force_name)
            local surface = game.surfaces[1]

            local control_data = AttackGroupBeaconProcessor.get_control_data(surface.index, force.name)
            assert.equal('table', type(control_data), 'Valid Force Control Data')

            game.merge_forces(force_name, 'player')
            after_ticks(60, function()
                remote.call('enemyracemanager_debug', 'print_global')
                control_data = AttackGroupBeaconProcessor.get_control_data(surface.index, force_name)
                assert.equal(nil, control_data, 'Valid Force Control Data')
            end)
        end)
    end)
end)
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 10/30/2024 10:11 PM
---

local TestShared = require("shared")
local RaceSettingsHelper = require("__enemyracemanager__/lib/helper/race_settings_helper")
local ForceHelper = require("__enemyracemanager__/lib/helper/force_helper")
local QualityProcessor = require('lib/quality_processor')

before_each(function()
    TestShared.prepare_the_factory()
end)

after_each(function()
    TestShared.reset_the_factory()
end)

local enemy = 'enemy'
local enemy_race_name = 'erm_vanilla'
local planet = 'nauvis'

it("Test quality calculate_chance_cache", function()
    game.forces[enemy].set_evolution_factor(0.5)
    QualityProcessor.calculate_quality_points()
    assert(QualityProcessor.get_quality_point(enemy, planet) == 2200, "Quality Point is correct")
    assert(QualityProcessor.is_maxed_out(enemy, planet) == false, "maxed_out is false")

    game.forces[enemy].set_evolution_factor(1)
    QualityProcessor.calculate_quality_points()
    assert(QualityProcessor.get_quality_point(enemy, planet) == 4000, "Quality Point is 40%")

    --- set 2000000 accumulate point to test 100%
    storage.race_settings.erm_vanilla.attack_meter_total = 2000001
    QualityProcessor.calculate_quality_points()
    assert(QualityProcessor.get_quality_point(enemy, planet) == 10000, "Quality Point is 100%")
    assert(QualityProcessor.is_maxed_out(enemy, planet) == true, "maxed_out is true")

    local spawn_rate = QualityProcessor.get_spawn_rate(enemy,planet)
    assert(spawn_rate[1] == 0, "Legendary = 0")
    assert(spawn_rate[2] == 0.15, "Epic = 0.15")
    assert(spawn_rate[3] == 0.6, "Rare = 0.6")
    assert(spawn_rate[4] == 0.25, "Uncommon = 0.25")
    assert(spawn_rate[5] == 0, "Normal = 0")
end)

it('Test when applicable entities spawn, it should roll', function()
    local nauvis = game.surfaces[1]

    game.forces[enemy].set_evolution_factor(1)
    storage.race_settings.erm_vanilla.attack_meter_total = 2000001
    QualityProcessor.calculate_quality_points()

    local entity = nauvis.create_entity {
        name = 'erm_vanilla--big-biter--1',
        position = {32, 32}
    }

    local units = nauvis.find_entities_filtered {
        type = 'unit',
        radius = 32,
        position = {32,32}
    }
    local unit = units[1]
    local unit_name = ForceHelper.get_name_token(unit.name)
    assert(tonumber(unit_name[3]) > 1, 'Unit is able to swap to higher tier')

    local entity = nauvis.create_entity {
        name = 'erm_vanilla--biter-spawner--1',
        position = {-32, -32}
    }

    local units = nauvis.find_entities_filtered {
        type = 'unit',
        radius = 32,
        position = {32,32}
    }
    local unit = units[1]
    local unit_name = ForceHelper.get_name_token(unit.name)
    assert(tonumber(unit_name[3]) > 1, 'Spawner is able to swap to higher tier')

    local entity = nauvis.create_entity {
        name = 'erm_vanilla--big-worm-turret--1',
        position = {-32, -32}
    }

    local units = nauvis.find_entities_filtered {
        type = 'unit',
        radius = 32,
        position = {32,32}
    }
    local unit = units[1]
    local unit_name = ForceHelper.get_name_token(unit.name)
    assert(tonumber(unit_name[3]) > 1, 'Turret is able to swap to higher tier')
end)

it('Test when unit spawn at higher tier, it should not re-roll', function()
    local nauvis = game.surfaces[1]

    game.forces[enemy].set_evolution_factor(1)
    storage.race_settings.erm_vanilla.attack_meter_total = 2000001
    QualityProcessor.calculate_quality_points()

    local entity = nauvis.create_entity {
        name = 'erm_vanilla--big-biter--5',
        position = {32, 32}
    }

    local units = nauvis.find_entities_filtered {
        type = 'unit',
        radius = 32,
        position = {32,32}
    }
    local unit = units[1]
    local unit_name = ForceHelper.get_name_token(unit.name)
    assert(tonumber(unit_name[3]) == 5, 'Turret is able to swap to higher tier')
end)

it('Test when generate a group, whether it respect the ratio. However exceptions may happen, depends on RNG god', function()
    local nauvis = game.surfaces[1]
    game.forces[enemy].set_evolution_factor(1)
    storage.race_settings.erm_vanilla.attack_meter_total = 2000001
    QualityProcessor.calculate_quality_points()

    for i = 1, 100, 1 do
        nauvis.create_entity {
            name = 'erm_vanilla--big-biter--1',
            position = {0, 0}
        }
    end

    local units = nauvis.find_entities_filtered {
        type = 'unit',
        radius = 32,
        position = {0,0}
    }

    local total_two = 0
    local total_three = 0
    local total_four = 0
    local total_switch = {
        ['2'] = function() total_two = total_two + 1  end,
        ['3'] = function() total_three = total_three + 1  end,
        ['4'] = function() total_four = total_four + 1  end
    }
    for _, unit in pairs(units) do
        local unit_name_token = ForceHelper.get_name_token(unit.name)
        if total_switch[unit_name_token[3]] then
            total_switch[unit_name_token[3]]()
        end
    end

    assert(total_two < total_three, 'Uncommon < Rare')
    assert(total_four < total_three, 'Epic < Rare')
end)